#+property: header-args :results output :exports both
* N=5: i, j loop
#+begin_src python
  N = 5
  count = 0
  for i in range(N):
      for j in range(i+1, N):
          count += 1
          print(count, ":", i,j)
#+end_src

#+RESULTS:
#+begin_example
1 : 0 1
2 : 0 2
3 : 0 3
4 : 0 4
5 : 1 2
6 : 1 3
7 : 1 4
8 : 2 3
9 : 2 4
10 : 3 4
#+end_example

* N=5: modified lambda loop
#+begin_src python :results output
  import math

  N = 5
  Nc2 = 10
  count = 0
  for L in reversed(range(Nc2)):
      j = math.floor(math.sqrt(0.25 + 2*L) + 0.5)
      i = L - j*(j-1)//2
      count += 1
      print(count, ":", N - 1 - j, N - 1 - i)
#+end_src

#+RESULTS:
#+begin_example
1 : 0 1
2 : 0 2
3 : 0 3
4 : 0 4
5 : 1 2
6 : 1 3
7 : 1 4
8 : 2 3
9 : 2 4
10 : 3 4
#+end_example

* N=5: lambda loop
#+begin_src python
  import math

  N = 5
  Nc2 = 10
  count = 0
  for L in reversed(range(Nc2)):
      j = math.floor(math.sqrt(0.25 + 2*L) + 0.5)
      i = L - j*(j-1)//2
      count += 1
      print(count, ":", i, j)
#+end_src

#+RESULTS:
#+begin_example
1 : 3 4
2 : 2 4
3 : 1 4
4 : 0 4
5 : 2 3
6 : 1 3
7 : 0 3
8 : 1 2
9 : 0 2
10 : 0 1
#+end_example

* N=5: modified i, j loop
#+begin_src python
  N = 5
  count = 0
  for i in range(N):
      for j in range(i-1, 0-1, -1):
          count += 1
          print(count, ":", j, i)
#+end_src

#+RESULTS:
#+begin_example
1 : 0 1
2 : 1 2
3 : 0 2
4 : 2 3
5 : 1 3
6 : 0 3
7 : 3 4
8 : 2 4
9 : 1 4
10 : 0 4
#+end_example
