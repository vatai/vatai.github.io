<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://vatai.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://vatai.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-08T06:00:03+00:00</updated><id>https://vatai.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">[draft] SCoPing SNAP</title><link href="https://vatai.github.io/blog/2025/scoping-snap/" rel="alternate" type="text/html" title="[draft] SCoPing SNAP"/><published>2025-04-15T00:00:00+00:00</published><updated>2025-04-15T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2025/scoping-snap</id><content type="html" xml:base="https://vatai.github.io/blog/2025/scoping-snap/"><![CDATA[<h1 id="scoping-snap">SCoPing SNAP</h1> <p>This post describes my (ultimately failed) attempts to run <a href="/projects/tadashi">Tadashi</a> <a class="citation" href="#vatai2024tadashi">(Vatai et al., 2024)</a> on <a href="https://github.com/lanl/SNAP">SNAP</a>.</p> <p>In the search for realistic apps I wrote <code class="language-plaintext highlighter-rouge">scop_detector</code>, a very simple program which would run PET’s automatic scop detection algorithm on any given <code class="language-plaintext highlighter-rouge">.c</code> file, and print out the found schedule trees along with a summary (number of SCoPs). This was obviously wrapped in a <code class="language-plaintext highlighter-rouge">scops_in_dir</code> script which ran it on all the <code class="language-plaintext highlighter-rouge">.c</code> files in a directory, which made “probing” projects for SCoPs trivial: clone/download the source code, run <code class="language-plaintext highlighter-rouge">scops_in_dir</code> and keep an eye out for a big/deep schedule tree. SNAP was one of the first apps which looked promising to extract SCoPs from!</p> <p><code class="language-plaintext highlighter-rouge">scop_detector</code> showed a nice big and deep schedule tree with multiple nested loop, which was promising, but it also printed an error which I saw for the first time saying “data dependent conditions not supported”. The error message was coming from code copied from <a href="https://repo.or.cz/ppcg.git">PPCG</a>, which was copied as part of the dead code elimination algorithm.</p>]]></content><author><name></name></author><category term="programming"/><category term="tadashi"/><summary type="html"><![CDATA[SCoPing SNAP]]></summary></entry><entry><title type="html">MPI4py under Slurm</title><link href="https://vatai.github.io/blog/2025/mpi4py-with-slurm/" rel="alternate" type="text/html" title="MPI4py under Slurm"/><published>2025-02-11T00:00:00+00:00</published><updated>2025-02-11T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2025/mpi4py-with-slurm</id><content type="html" xml:base="https://vatai.github.io/blog/2025/mpi4py-with-slurm/"><![CDATA[<p>For <a href="/projects/tadashi">TADASHI</a> we are building a “benchmarking harness”, which would have a main instance running on one node of a cluster, and distribute to other nodes the code transformation (potentially), the compilation and the measurement of transformed apps.</p> <h1 id="benchmarking-harness-specifications">Benchmarking harness specifications</h1> <p>The key functionalities required by the harness are:</p> <ul> <li>it should have a python interface and</li> <li>it should distribute the benchmarking across nodes of a cluster/supercomputer.</li> </ul> <h1 id="candidate-solutions">Candidate solutions</h1> <p><a href="https://docs.celeryq.dev/en/stable/">Celery</a> and <a href="https://jolt.readthedocs.io/en/latest/">Jolt</a> came up as possible solutions, however we ended up trying only <a href="https://www.ray.io/">Ray</a> and <a href="https://mpi4py.readthedocs.io/en/stable/">MPI4py</a>.</p> <p>Both Ray and MPI4py had some sort of implementations for <a href="https://docs.python.org/3/library/concurrent.futures.html">Python futures</a>, and this looked like a good way to implement the benchmarking harness. I opted for MPI4py since it is a better fit for the MPI-based HPC clusters we have access to.</p> <p>The plan™ was to implement everything using Pythons <code class="language-plaintext highlighter-rouge">concurrent.futures</code> on my trusty little laptop, and then just swap out <code class="language-plaintext highlighter-rouge">concurrent.futures</code> with <code class="language-plaintext highlighter-rouge">mpi4py.futures</code>. But as it is often the case, life wasn’t so simple.</p> <h1 id="the-cluster-environment">The cluster environment</h1> <p>Also, as it is often the case, the required software is often not available on the cluster. So, the first round of crocodile wrestling was compiling a bunch of libraries and getting them all to work together. That was a pain in the neck, but doable.</p> <h1 id="the-wrench-in-the-gears-figuring-out-how-to-invoke-mpi4py-when-we-want-to-use-futures">The wrench in the gears: Figuring out (how to invoke) MPI4py when we want to use futures</h1> <p>After figuring Tadashi’s dependencies, the time came to “just swap out”™ <code class="language-plaintext highlighter-rouge">futures</code> (and <code class="language-plaintext highlighter-rouge">Executor</code>) from Python’s <code class="language-plaintext highlighter-rouge">concurrent</code> with MPI4py’s implementation.</p> <h2 id="the-right-mpi-which-supports-mpi_comm_spawn">The right MPI, which supports <code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code></h2> <p>Something which came up earlier in the development of the benchmarking harness was <a href="https://en.wikipedia.org/wiki/Fugaku_(supercomputer)">Fugaku</a>’s support for master-worker jobs/workloads, which uses <a href="https://www.mpi-forum.org/docs/mpi-4.1/mpi41-report/node289.htm#Node289"><code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code></a> to dynamically spawn processes, and incidentally, MPI4py <code class="language-plaintext highlighter-rouge">futures</code>, more precisely the <a href="https://mpi4py.readthedocs.io/en/stable/mpi4py.futures.html#mpipoolexecutor"><code class="language-plaintext highlighter-rouge">MPIPoolExecutor</code></a>, also uses <code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code> under the hood. So it was a bit disappointing when I realised <a href="">OpenMPI doesn’t support <code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code></a>. However, MPICH, which does support <code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code>, was also available on the cluster and I just needed to recompile MPI4py with MPICH loaded to use it.</p> <h2 id="testing-went-well">Testing went well</h2> <p>Initially, it was a bit hard to wrap my head around how <code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code> works, in my head <code class="language-plaintext highlighter-rouge">MPI_COMM_WORLD</code> is everything MPI is/can be aware of, but it turns out, if you have an allocation larger then <code class="language-plaintext highlighter-rouge">MPI_COMM_WORLD</code>, MPI still knows about it. This means, if you have an allocation of 10 nodes, you don’t lunch your master/parent program with <code class="language-plaintext highlighter-rouge">mpirun -n 10</code> but with <code class="language-plaintext highlighter-rouge">mpirun -n 1</code> and it will spawn processes on the remaining 9 nodes. So I logged in the cluster, got an interactive node, copy-pasted some example code for MPI4py spawn, and tested it – everything looked fine.</p> <h2 id="unwanted-behaviour--back-to-the-basics">Unwanted behaviour &amp; back to the basics</h2> <p>However, when I swapped <code class="language-plaintext highlighter-rouge">concurrent.futures</code> with <code class="language-plaintext highlighter-rouge">mpi4py.futures</code>, and wrote a submission script (to be launched by <code class="language-plaintext highlighter-rouge">sbatch</code>), things didn’t quite work. First, I realised the state of Tadashi which is in the binary <code class="language-plaintext highlighter-rouge">.so</code> files did not get pickled and transferred to the workers. After, temporarily disabling <code class="language-plaintext highlighter-rouge">.so</code> dependent code, I tried to rerun things, which did not fail!</p> <p>However, when, for some reason I remembered to check if the workers are actually being executed on different nodes, it turned out this is not the case: when checking <code class="language-plaintext highlighter-rouge">gethostname</code> both master and workers were executed on the same node (and the other allocated nodes remained idle).</p> <h2 id="3-ways-to-run-thing-in-slurm-and-finding-what-threw-the-wrench-in-the-gears">3 ways to run thing in Slurm, and finding what threw the wrench in the gears</h2> <p>Ultimately, the proverbial wrench in the gears, (aka bug, aka WTF) came down to the different ways you can launch programs with Slurm: using <code class="language-plaintext highlighter-rouge">srun</code>, <code class="language-plaintext highlighter-rouge">salloc</code> and <code class="language-plaintext highlighter-rouge">sbatch</code>.</p> <p><code class="language-plaintext highlighter-rouge">srun</code> allocates you resources from a cluster, and runs your binary (I like to think about <code class="language-plaintext highlighter-rouge">srun</code> as <code class="language-plaintext highlighter-rouge">mpirun</code>, but it is “aware” of the resources). <code class="language-plaintext highlighter-rouge">salloc</code> doesn’t run the program, it just allocates resources, and if a command is provided it executes that command only once, i.e. not on all nodes. To utilise all nodes within an allocation obtained by <code class="language-plaintext highlighter-rouge">salloc</code>, one would call <code class="language-plaintext highlighter-rouge">srun</code>. Finally, <code class="language-plaintext highlighter-rouge">sbatch</code> is like <code class="language-plaintext highlighter-rouge">srun</code> but instead of getting the allocation and running it immediately (dumping stdout to the terminal), <code class="language-plaintext highlighter-rouge">sbatch</code> puts the job/command in the queue, and saves the output into a <code class="language-plaintext highlighter-rouge">slurm-*.out</code> file.</p> <h2 id="getting-it-right">Getting it right</h2> <p>To get to the bottom of things, I ended up writing a (pair of) simple MPI programs, <code class="language-plaintext highlighter-rouge">spawn_main.c</code> and <code class="language-plaintext highlighter-rouge">spawn_child.c</code>, each reporting the hostname. And again I made the mistake of running things from an interactive node, which I obtained using <code class="language-plaintext highlighter-rouge">srun -N 3 -p genoa --pty bash</code>. From thin interactive instance, running <code class="language-plaintext highlighter-rouge">mpirun -N 1 ./spawn_main</code> gave the desired results: the main and child processes were all reporting different hostnames.</p> <p>The moment of clarity came when I wanted to present the full example, and wrote a <code class="language-plaintext highlighter-rouge">spawn_submit.sh</code> submission script, which I launched with <code class="language-plaintext highlighter-rouge">sbatch</code>. Lo and behold, I was back to the undesired behaviour of both main and child instances reporting the same hostname! This meant, that calling <code class="language-plaintext highlighter-rouge">mpirun -N 1 ./spawn_main</code> didn’t do the same thing when called from a submission script and when called from an interactive session.</p> <p>I tried emulating the interactive session by running <code class="language-plaintext highlighter-rouge">mpirun</code> inside <code class="language-plaintext highlighter-rouge">bash</code> inside <code class="language-plaintext highlighter-rouge">srun</code>, i.e.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>srun bash -c 'mpirun -N 1 ./spawn_main`
</code></pre></div></div> <p>The results was a new kinda of undesired behaviour. Now <code class="language-plaintext highlighter-rouge">mpirun</code> saw all the allocated nodes and processes were reporting different hostnames, but each hostname was printed 3 times. It seems <code class="language-plaintext highlighter-rouge">srun</code> executed <code class="language-plaintext highlighter-rouge">mpirun</code> 3x, but oddly enough the main process was always on the same node (i.e. not on all 3 nodes for the 3x execution of <code class="language-plaintext highlighter-rouge">srun</code>).</p> <p>I obtained the first working solution by adding another <code class="language-plaintext highlighter-rouge">if</code> to the monstrosity above which checked the “slurm rank”, i.e.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>srun bash -c '[ $SLURM_NODEID = 0 ] &amp;&amp; mpirun -N 1 ./spawn_main || true'
</code></pre></div></div> <p>Calling <code class="language-plaintext highlighter-rouge">mpirun</code> inside <code class="language-plaintext highlighter-rouge">srun</code> already felt wrong, and the added complications didn’t improve the situation, so after some googling I fond an <a href="https://stackoverflow.com/questions/74160847/spawning-child-processing-on-hpc-using-slurm">SO question</a> asking about launching <code class="language-plaintext highlighter-rouge">MPI_Comm_spawn</code> from slurm, and copied the batch script parameters from there and it worked.</p> <p>It turns out, the missing ingredient was a missing <code class="language-plaintext highlighter-rouge">-n 3</code> for the job allocation. The final working solution looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/usr/bin/bash
#SBATCH -p genoa
#SBATCH -N 3
#SBATCH -n 3
#SBATCH -c 1

# ... snip ...

mpirun -N 1 spawn_main
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">-N</code> is the number of nodes allocated, <code class="language-plaintext highlighter-rouge">-n</code> is the number of tasks (i.e. number of MPI ranks). The solution is valid without <code class="language-plaintext highlighter-rouge">-c 1</code> (number of CPUs per task/rank), but I left it in just in case.</p>]]></content><author><name></name></author><category term="programming"/><category term="tadashi"/><summary type="html"><![CDATA[For TADASHI we are building a “benchmarking harness”, which would have a main instance running on one node of a cluster, and distribute to other nodes the code transformation (potentially), the compilation and the measurement of transformed apps.]]></summary></entry><entry><title type="html">Making Tadashi into a Python package</title><link href="https://vatai.github.io/blog/2025/making-tadashi-into-a-python-package/" rel="alternate" type="text/html" title="Making Tadashi into a Python package"/><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2025/making-tadashi-into-a-python-package</id><content type="html" xml:base="https://vatai.github.io/blog/2025/making-tadashi-into-a-python-package/"><![CDATA[<h1 id="the-current-situation">The current situation</h1> <p>Currently, to run Tadashi, you need to compile some .so files first with CMake. It needs to be built into the <code class="language-plaintext highlighter-rouge">build</code> directory under the project root. Finally, adding the project root to <code class="language-plaintext highlighter-rouge">PYTHONPATH</code> will allow python to find both the python files and the binary .so files.</p> <h2 id="swig">SWIG</h2> <p>First thing to clean up was implementing SWIG instead the ad-hoc CDLL approach currently used to call the C/C++ functions from Python. CDLL takes the path of the .so file, which is hard-coded in the Python files (hence the ad-hoc character of the implementation). CDLL also requires the arguments and return values of the functions exposed to Python from the .so files need to be copied from the .h files manually.</p> <p>The SWIG implementation has the following advantages:</p> <ul> <li>The arguments and return values of the functions are automagically generated based on the .h files, thus letting us have a single source of truth (well, technically two, since the function prototypes in .h and .cc need to be synced manually, but the compiler catches any discrepancies).</li> <li>SWIG generates the wrapper Python file in the same directory as the .so file (as part of the build process), eliminating the need to manually specify the path to the .so.</li> </ul> <h2 id="building-a-python-package">Building a Python package</h2> <p>To the best of my knowledge, the way to do python packages is to write a <code class="language-plaintext highlighter-rouge">pyproject.toml</code> file. However, <code class="language-plaintext highlighter-rouge">pyproject.toml</code> does not support build extensions and they must be configured in <code class="language-plaintext highlighter-rouge">setup.py</code>. The <code class="language-plaintext highlighter-rouge">cmake-build-extension</code> build extension invokes CMake as part of the build process of the wheel.</p> <p>TODO</p> <ul> <li>double check</li> </ul> <hr/> <ul> <li>Python package</li> <li>cmake-build-extension</li> </ul> <h1 id="the-new-problems">The new problems</h1> <hr/>]]></content><author><name></name></author><category term="programming"/><category term="tadashi"/><summary type="html"><![CDATA[The current situation]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://vatai.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://vatai.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://vatai.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">[DRAFT] Flattening loops of combinations, again!?</title><link href="https://vatai.github.io/blog/2024/flattening-loops-again/" rel="alternate" type="text/html" title="[DRAFT] Flattening loops of combinations, again!?"/><published>2024-12-03T00:00:00+00:00</published><updated>2024-12-03T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2024/flattening-loops-again</id><content type="html" xml:base="https://vatai.github.io/blog/2024/flattening-loops-again/"><![CDATA[<p>We had problems implementing the 3x1 flattened four nested loops generating 4-combinations in <a class="citation" href="#dash2021scaling">(Dash et al., 2021)</a>.</p> \[\begin{align*} q &amp;\gets (\sqrt{729 \lambda^2 -3} + 27 \lambda)^{1/3} \\ k &amp;\gets \lfloor (q/3^2)^{1/3} + 1/(3q)^{1/3} - 1 \rfloor \\ T_z &amp;\gets k (k + 1) (k + 2) / 6 \\ \lambda' &amp;= \lambda - T_z \\ j &amp;\gets \lfloor \sqrt{1/4 + 2\lambda'} -1/2 \rfloor \\ i &amp;\gets \lambda' - j (j + 1) / 2 \end{align*}\]]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[We had problems implementing the 3x1 flattened four nested loops generating 4-combinations in (Dash et al., 2021).]]></summary></entry><entry><title type="html">Flattening loops of combinations</title><link href="https://vatai.github.io/blog/2024/flattening-loops-of-combinations/" rel="alternate" type="text/html" title="Flattening loops of combinations"/><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2024/flattening-loops-of-combinations</id><content type="html" xml:base="https://vatai.github.io/blog/2024/flattening-loops-of-combinations/"><![CDATA[<p>In <a class="citation" href="#dash2021scaling">(Dash et al., 2021; Al Hajri et al., 2020)</a>, when iterating through all 2-hit combinations (of \(G\) number of genes), the outer two \(i\) and \(j\) loops are “flattened” into a single \(\lambda\) loop (\(\lambda \gets 1\ldots\binom{G}{2}\)). To reconstruct the \(i\) and \(j\) the following formulas are used:</p> \[\begin{align} j &amp;= \lfloor \sqrt{1/4 + 2 \lambda} + 1/2 \rfloor \\ i &amp;= \lambda - j (j - 1) / 2 \end{align}\] <p>Let’s try to derive those formulas.</p> <p>It is easy to spot the \(S_{j-1} := \sum_{t=1}^{j-1} t = \frac{j (j - 1)}{2}\) formula for the sum of all positive integers going up to \(j-1\). Which leads us to:</p> \[\lambda = i + \frac{j(j - 1)}{2} = i + \sum_{t=1}^{j-1} t\] <p>The same \(S_{j-1}\) formula is also present in the expression for \(j\) (we begin by removing the \(\lfloor \cdot \rfloor\)):</p> \[\begin{align} j &amp;= \sqrt{1/4 + 2 \lambda} + 1/2 \\ j - 1/2 &amp;= \sqrt{1/4 + 2 \lambda} \\ (j - 1/2)^2 &amp;= 1/4 + 2 \lambda \\ j^2 - j + 1/4 &amp;= 1/4 + 2 \lambda \\ j^2 - j &amp;= 2 \lambda \\ \lambda &amp;= \frac{j (j-1)}{2} \end{align}\] <p>According to <a class="citation" href="#dash2021scaling">(Dash et al., 2021; Al Hajri et al., 2020)</a> this flattened \(\lambda\) loop corresponds to the following \(i\) and \(j\) loop:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 : 0 1
2 : 0 2
3 : 0 3
4 : 0 4
5 : 1 2
6 : 1 3
7 : 1 4
8 : 2 3
9 : 2 4
10 : 3 4
</code></pre></div></div> <p>If we implement the flattened loop we see that this is only true in the sense that the set of visited combination is the same, however, the order is different.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">Nc2</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">for</span> <span class="n">L</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">Nc2</span><span class="p">):</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mf">0.25</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">L</span> <span class="o">-</span> <span class="n">j</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 : 0 1
1 : 0 2
2 : 1 2
3 : 0 3
4 : 1 3
5 : 2 3
6 : 0 4
7 : 1 4
8 : 2 4
9 : 3 4
</code></pre></div></div> <p>So to generate the combinations in the same order as the initial \(i\), \(j\) loops, we need to modify the code as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">Nc2</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">for</span> <span class="n">L</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">Nc2</span><span class="p">)):</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mf">0.25</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">L</span> <span class="o">-</span> <span class="n">j</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">j</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>9 : 0 1
8 : 0 2
7 : 0 3
6 : 0 4
5 : 1 2
4 : 1 3
3 : 1 4
2 : 2 3
1 : 2 4
0 : 3 4
</code></pre></div></div> <p>Or alternatively, if we want to modify the original \(i\), \(j\) loop to match the \(\lambda\) loop and the mathematical derivation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 : 0 1
2 : 0 2
3 : 1 2
4 : 0 3
5 : 1 3
6 : 2 3
7 : 0 4
8 : 1 4
9 : 2 4
10 : 3 4
</code></pre></div></div> <h1 id="graphical-representation">Graphical representation</h1> <script type="text/tikz">
\begin{tikzpicture}

% GRAY
\foreach \i in {0,1,2,3,4}
  \foreach \j in {0,1,2,3}
    \node at (\i, \j) [draw, lightgray, circle]{};

% RED
\foreach \j [evaluate=\j as \jj using int(\j-1)] in {1,2,3}
  \foreach \i in {\jj,...,0}
    \node at (\j, \i) [fill, blue, circle]{};
\foreach \i in {0,1} \node at (4,\i) [fill, red, circle]{};

% labels
\node at (-1,-1) [anchor=east]{$\lambda=\frac{j(j-1)}{2}+i=6+1$};
\node at (-1,1) [draw]{$i=1$};
\node at (4,-1) [draw]{$j=4$};
\foreach \i in {0,2,3} \node at (-1,\i) {$\i$};
\foreach \j in {0,1,...,3} \node at (\j,-1) {$\j$};

\end{tikzpicture}
</script> <p>Because \(\lambda \mapsto j(\lambda) = \lfloor \sqrt{1/4 + 2 \lambda} + 1/2 \rfloor\) is monotonically increasing (non-decreasing), returning the \(\lfloor \cdot \rfloor\) which we skipped in the calculations above, means that \(j\) is the largest possible integer such that \(\lambda = i + \frac{j(j - 1)}{2}\) for a non-negative integer \(i\). In the figure we can read \(j=4\) since the blue dots represent \(\sum_{t=1}^{j-1} t\) and the red dots show the calculation of \(i = \lambda - \sum_{t=1}^{j-1} t\).</p>]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[In (Dash et al., 2021; Al Hajri et al., 2020), when iterating through all 2-hit combinations (of \(G\) number of genes), the outer two \(i\) and \(j\) loops are “flattened” into a single \(\lambda\) loop (\(\lambda \gets 1\ldots\binom{G}{2}\)). To reconstruct the \(i\) and \(j\) the following formulas are used:]]></summary></entry><entry><title type="html">Continuous benchmarking on supercomputers</title><link href="https://vatai.github.io/blog/2022/continuous-benchmarking-on-supercomputers/" rel="alternate" type="text/html" title="Continuous benchmarking on supercomputers"/><published>2022-05-18T11:12:00+00:00</published><updated>2022-05-18T11:12:00+00:00</updated><id>https://vatai.github.io/blog/2022/continuous-benchmarking-on-supercomputers</id><content type="html" xml:base="https://vatai.github.io/blog/2022/continuous-benchmarking-on-supercomputers/"><![CDATA[<p>The <a href="https://doi.org/10.1145/3324989.3325719">paper</a> <em>“Towards Continuous Benchmarking: An Automated Performance Evaluation Framework for High Performance Software”</em>, by Anzt, H. et al. describes the posibilities of <em>continuous benchmarking</em> (CB), however it doesn’t give direct instructions how to implement it. Looking at the source code is always a possibility, but the <code class="language-plaintext highlighter-rouge">yaml</code> files there aren’t really documented (which is no surprises since they are pretty self documenting). Still, I hope this post will help people who unfamiliar with <em>Continuous X</em> approaches (where X can be integration, development, benchmarking etc).</p> <h1 id="overview">Overview</h1> <p>We will need 3 things:</p> <ul> <li>The <strong>app/benchmark</strong> itself, which we will assume to be given.</li> <li>We need to set up a <strong>“self-hosted runner”</strong>, the program running on the supercomputer, which will be executing the actions such as compiling the app and submitting job to the scheduler of the supercomputer.</li> <li>The <strong>yaml file</strong> which describes when and what should be executed by the “runner”.</li> </ul> <p>I’ll be describing the scenario for GitHub. Other sites like GitLab have similar systems.</p> <h2 id="self-hosted-runner">Self-hosted runner</h2> <p>In the Github repo <strong>settings</strong>, on the left-hand side, under <strong>Actions</strong> there is a <strong>Runners</strong> page. In the top-right corner there is a green <strong>New self-hosted runner</strong> button. Clicking on this button brings up a page where you can select the OS and architecture. For supercomputers Linux, x64 is a good choice since usually that is something that will run on the login node.</p> <p>Below the OS and architecture choice, the page lists the commands needed to install the self-hosted runner. This consists of several sections.</p> <p>The first section described how to download, validate and extract the runner software. <strong>Don’t use these instructions</strong>, use the ones from the GitHub settings page.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create a folder
$ mkdir actions-runner &amp;&amp; cd actions-runner
# Download the latest runner package
$ curl -o actions-runner-linux-x64-2.291.1.tar.gz -L https://github.com/actions/runner/releases/download/v2.291.1/actions-runner-linux-x64-2.291.1.tar.gz
# Optional: Validate the hash
$ echo "1bde3f2baf514adda5f8cf2ce531edd2f6be52ed84b9b6733bf43006d36dcd4c  actions-runner-linux-x64-2.291.1.tar.gz" | shasum -a 256 -c
# Extract the installer
$ tar xzf ./actions-runner-linux-x64-2.291.1.tar.gz
</code></pre></div></div> <p>The second section describes how to configure and run the self-hosted runner. Again <strong>don’t use these instructions</strong>, use the ones provided on the settings page, since the <code class="language-plaintext highlighter-rouge">--url</code> and the <code class="language-plaintext highlighter-rouge">--token</code> are dependent on the repo you want to add the runner to. The <code class="language-plaintext highlighter-rouge">./config.sh</code> asks a few questions, but generally it is very simple and usually the default answers are acceptable. The last command <code class="language-plaintext highlighter-rouge">./run.sh</code> is the runner itself, it connects to GitHub, and needs to be running to be able to accept workflows/jobs. See <a href="#security">note</a> about security.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create the runner and start the configuration experience
$ ./config.sh --url https://github.com/&lt;user&gt;/&lt;repo&gt; --token &lt;token&gt;
# Last step, run it!
$ ./run.sh
</code></pre></div></div> <p>The third section describes how to enable the runner in the Yaml file which is described in the next section.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Use this YAML in your workflow file for each job
runs-on: self-hosted
</code></pre></div></div> <p>This is the procedure to add a self-hosted runner to a repo. To the best of my knowledge, self-hosted runners can be added to GitHub users or GitHub organisations.</p> <h2 id="yaml-workflow-file">Yaml workflow file</h2> <p>To automatically run commands, we need to create a <code class="language-plaintext highlighter-rouge">&lt;name&gt;.yml</code> file in the <code class="language-plaintext highlighter-rouge">&lt;repo&gt;/.github/workflows/</code> directory, for example with the following contents:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .github/workflows/build-and-submit.yml
name: Build and submit
on: push
jobs:
  build:
    name: Build
    runs-on: [self-hosted,login-node]
    steps:
    - uses: actions/checkout@master
    - name: Create build dir
      run: mkdir build
    - name: Run cmake
      working-directory: ./build
      run: CXX=FCCpx cmake ..
    - name: Build
      run: cmake --build build --clean-first
    - name: Submit
      run: pjsub -g $(stat . -c %G) sub.sh
</code></pre></div></div> <p>Each <code class="language-plaintext highlighter-rouge">&lt;name&gt;.yml</code> file (which can have any name) describes a workflow, with its <code class="language-plaintext highlighter-rouge">name:</code> (which can be any string), and the event when it will be executed. The example above will be exectuted <code class="language-plaintext highlighter-rouge">on: push</code>.</p> <p>Each workflow consists of one or more <code class="language-plaintext highlighter-rouge">jobs:</code>. Multiple jobs are, by default, executed in parallel. In the example, for simplicity, there is only one job, with the custom identifier <code class="language-plaintext highlighter-rouge">build:</code> (this can be a different identifier e.g. <code class="language-plaintext highlighter-rouge">job1:</code>). Each job has a <code class="language-plaintext highlighter-rouge">name:</code> (similarly to a workflow), and each job needs to specify where it is should run using the <code class="language-plaintext highlighter-rouge">runs-on:</code> value. Without self-hosted runners, we can specify here a docker image (something like <code class="language-plaintext highlighter-rouge">ubuntu-20.04</code>), but in our case <code class="language-plaintext highlighter-rouge">[self-hosted,login-node]</code> specifies that the job should be executed on a <code class="language-plaintext highlighter-rouge">self-hosted</code> runner. The <code class="language-plaintext highlighter-rouge">login-node</code> is custom label which can be added to the runner on GitHub.</p> <p>The main part of a job is the <code class="language-plaintext highlighter-rouge">steps:</code> field, which describes a list of steps which are executed sequentially. The job in the example has 5 steps. The first step is an “external” step (like importing a library), which checks out the master branch of the repository. The second, third and fourth steps create a <code class="language-plaintext highlighter-rouge">build</code> directory, call <code class="language-plaintext highlighter-rouge">cmake</code> in that directory (using the <code class="language-plaintext highlighter-rouge">working-directory:</code>), and builds the app using <code class="language-plaintext highlighter-rouge">cmake --build</code>. Finally, the last step, calls the command of the supercomputer scheduler to submit the <code class="language-plaintext highlighter-rouge">sub.sh</code> script.</p> <h1 id="observing-the-actions">Observing the actions</h1> <p>The top bar of a GitHub repository has an “Actions” page.</p> <p><img src="/assets/img/2022-05-18-continuous-benchmarking-on-supercomputers/actions.png" alt="Actions button" title="Actions button"/></p> <p>This page lists the workflows which were executed for the given repository. Clicking on a workflow, brings up a list of jobs defined for that workflow, and clicking on a job brings up the steps of that job. Clicking on a step expands it and displays the</p> <p><img src="/assets/img/2022-05-18-continuous-benchmarking-on-supercomputers/observing.png" alt="Observing actions" title="Observing actions"/></p> <h1 id="security">Security</h1> <p>This is obviously a security issue. The runner script <code class="language-plaintext highlighter-rouge">./run.sh</code> should be running all the time, connected to GitHub.com, waiting for jobs. As stated on GitHub, this should be enabled only for <strong>private</strong> repositories.</p> <h1 id="future-work">Future work</h1> <p>Next, I’d like to figure out how to write a workflow or a job which monitors when the submitted script finishes.</p>]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[The paper “Towards Continuous Benchmarking: An Automated Performance Evaluation Framework for High Performance Software”, by Anzt, H. et al. describes the posibilities of continuous benchmarking (CB), however it doesn’t give direct instructions how to implement it. Looking at the source code is always a possibility, but the yaml files there aren’t really documented (which is no surprises since they are pretty self documenting). Still, I hope this post will help people who unfamiliar with Continuous X approaches (where X can be integration, development, benchmarking etc).]]></summary></entry><entry><title type="html">Polyhedral compilation: part 1</title><link href="https://vatai.github.io/blog/2022/polyhedral-compilation-part-1/" rel="alternate" type="text/html" title="Polyhedral compilation: part 1"/><published>2022-01-29T00:00:00+00:00</published><updated>2022-01-29T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2022/polyhedral-compilation-part-1</id><content type="html" xml:base="https://vatai.github.io/blog/2022/polyhedral-compilation-part-1/"><![CDATA[<h1 id="abstract">Abstract</h1> <p>This blog posts is the first in a series of posts about <strong>polyhedral compilation</strong>, a mathematical model used to describe and reason about certain types of loops, with the aim to generate faster code.</p> <p>This post revisits <a href="https://link.springer.com/article/10.1007/BF01407835">“Some efficient solutions to the affine scheduling problem. I. One-dimensional time” by Paul Feautrier</a>, the seminal paper of the field, which describes how to <em>formulate the the search for an optimal schedule as an integer linear programming (ILP) problem</em>.</p> <h1 id="overview-of-the-process">Overview of the process</h1> <p>Formulated as a source-to-source compilation, the following steps give a (<em>very simplified</em>) overview of the entire process:</p> <ul> <li><strong>The input</strong> is source code with “nice” loops (where “nice” means that the loops satisfy such properties, that they are simple enough to be handled by ILPs).</li> <li>Problem/step 1: Finding the “nice” loops in the source code. This is handled by <a href="https://repo.or.cz/w/pet.git">Polyhedral Extraction Tool (PET)</a> which extracts affine description of the source code into <a href="https://repo.or.cz/w/isl.git">ISL</a> objects (named integer tuple sets/relations etc.). The loops in the source code can be marked with <code class="language-plaintext highlighter-rouge">scop</code> and <code class="language-plaintext highlighter-rouge">endscop</code> <code class="language-plaintext highlighter-rouge">#pragma</code>s or PET also has an auto-detect feature.</li> <li>Problem/step 2: Find or approximate the dependencies in the code.</li> <li><strong>Problem/step 3</strong>: Formulate an ILP, which describes the statements from in step 1 and the dependencies from step 2. Given an optimisation objective, the ILP can be solved to find an <strong>(optimal) schedule</strong>.</li> <li>Problem/step 4: Based on the schedule obtained in the previous step <strong>generate</strong> (improved) source code</li> <li><strong>The output</strong> is a source code with optimised loops.</li> </ul> <p>This post only addresses (the first half) of <strong>Problem/step 3</strong>.</p> <h1 id="example-code-matrix-vector-product">Example code: matrix vector product</h1> <pre><code class="language-C">for (i = 0; i &lt;= n; i++) {
S1: a[i] = 0.0;
    for (j = 0; j &lt;= n; j++)
S2:   a[i] += b[j] * M[i][j];
}
</code></pre> <p>The above code has two relevant <strong>statements</strong> which access the memory: <code class="language-plaintext highlighter-rouge">a[i] = 0.0;</code> labelled as \(S_1\) and <code class="language-plaintext highlighter-rouge">a[i] += b[j] * M[i][j];</code> labelled as \(S_2\). Each of the two statements is executed multiple times, it has multiple <strong>instances</strong>, for example the instances of statement \(S_1\) are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">a[0] = 0.0;</code> for \(i = 0\),</li> <li><code class="language-plaintext highlighter-rouge">a[1] = 0.0;</code> for \(i = 1\) etc.</li> </ul> <p>Since instances may need to be described by multiple loop variables, we adopt the notation \(\vec{i}\) for <strong>vectors in the iteration space</strong>, vectors with integer entries, such that the first element corresponds to the outermost and the last to the innermost loop variable. For example</p> <ul> <li><code class="language-plaintext highlighter-rouge">a[0] += b[1] * M[0][1];</code> for \(\vec{i} = (i, j) = (0, 1)\) and</li> <li><code class="language-plaintext highlighter-rouge">a[2] += b[3] * M[2][3];</code> for \(\vec{i} = (i, j) = (2, 3)\).</li> </ul> <h1 id="describing-dependencies">Describing dependencies</h1> <h2 id="generalised-dependency-graph-gdg">Generalised Dependency Graph (GDG)</h2> <h3 id="verticesdomains">Vertices/domains</h3> <p>For each statement \(S\) the corresponding <strong>vertex</strong> of the GDG is labelled with the <strong>domain</strong> (hence the \(\mathscr{D}\) notation below) of the statement \(S\), i.e. the subset of the iteration space containing the instances of \(S\) executed by the loop.</p> <ul> <li>\(\mathscr{D}_1 = \\{ i : 0 \le i \le n \\}\) for statement \(S_1\)</li> <li>\(\mathscr{D}_2 = \\{ (i, j) : 0 \le i, j \le n \\}\) for statement \(S_2\)</li> </ul> <p>Technically, the domains are not sets, but families of sets, depending on parameters (in this example on the single parameter \(n\)), so the domain for statement 1 is the map \(n \mapsto \\{ i : 0 \le i \le n \\}\), but we omit the “\(n \mapsto\)” part, and treat \(n\) as a constant (but this will be included in a more).</p> <h3 id="edgesdependencies">Edges/dependencies</h3> <p>The <strong>edges</strong> of GDG are the <strong>dependencies</strong> between two statements and are labelled with a subset of the direct product (a relation, hence the \(\mathscr{R}\) notation below) between the two domains of statements of the start and end of the edge, that is, if \(S'\) and \(S\) are two statements and there is a dependency between the instances \(\vec{i'} \in \mathscr{D}_ {S'}\) and \(\vec{i} \in \mathscr{D}_ S\) then there is and edge from vertex \(\mathscr{D}_{S'}\) to \(\mathscr{D} _S\) labelled with a set that contains \((\vec{i'}, \vec{i})\).</p> <p>A simplified (ergo very conservative) dependency analysis (there are programs which can perform such analysis) could yield two dependencies:</p> <ul> <li>\(\mathscr{R}_{1, 2} = \{ \bigl( i', (i, j) \bigr) : i' = i \}\) describes the dependency between \(S_1\) and \(S_2\) which requires for the initialisation in \(S_1\) (<code class="language-plaintext highlighter-rouge">a[i] = 0.0</code>) to precede (all instances of) statement \(S_2\) when the two statements share the same value for the loop variable \(i\) (hence \(i' = i\)).</li> <li>\(\mathscr{R}_{2, 2} = \{ \bigl( (i', j'), (i, j) : i' = i \land j' &lt; j \}\) describes the dependency of \(S_2\) on itself, which requires, for a given \(i\) (\(i' = i\)) the earlier instances of (in \(j\)) are executed before the later instances (hence \(j' &lt; j\)).</li> </ul> <p>This dependency analysis is <strong>very</strong> coarse and/or conservative (read poor), we’ll discuss a simple data flow dependency later (which is still quite simple, but a slight improvement over the one above).</p> <h2 id="detailed-dependency-graph-ddg">Detailed Dependency Graph (DDG)</h2> <p>The GDG is structured: the vertices in GDG are statements, and these statements represent multiple instances, but we actually care about the dependencies between the instances. For this reason the Detailed Dependency Graph “flattens” the graph, and every vertex is an instance of a statement, and the edges are the dependencies between these instances.</p> <h3 id="vertices">Vertices</h3> \[\Omega = \bigcup _{S \in V} \{ (S, \vec{i}) : \vec{i} \in \mathscr{D} _S \}\] <h3 id="edges">Edges</h3> \[\Gamma = \bigcup _{e \in E} \bigl\{ \bigl( (\sigma(e), \vec{i'}), (\delta(e), \vec{i}) \bigr) : \vec{i'} \in \mathscr{D} _{\sigma(e)}, \vec{i} \in \mathscr{D} _{\delta(e)}, (\vec{i'}, \vec{i}) \in \mathscr{R}_e \bigr\}\] <p>where the statement \(\sigma(e)\) is the start, statement \(\delta(e)\) is the end of edge \(e\) (of the GDG).</p> <h1 id="schedule">Schedule</h1> <p>The schedule is a map \(\theta: \Omega \to \mathbb{R}_0^+\) from the set of instances to some non-negative value which is the “date” (or timestamp, or time) of the instance.</p> <h2 id="generating-code">Generating code</h2> <p>As mentioned above, generating code is a separate, and very much non-trivial problem. But to get a better feeling how to interpret the schedule \(\theta\) a simplified code generations is presented:</p> <p>Let \(\mathtt{F}(t) = \\{ (S, \vec{i}) \in \Omega: \theta(S, \vec{i}) = t \\}\), i.e. the set of all instances of all statements which should be executed at time step \(t\). Let \(\mathtt{L} = \max_{(S, \vec{i}) \in \Omega} \theta(S, \vec{i})\).</p> <pre><code class="language-C++">for (t = 0; t &lt;= L; t++) {
  #pragma omp parallel
  for (inst : F(t))
    execute(inst);
  barrier();
}
</code></pre> <p>Of course, actual code generation is a much harder task than this naive pseudo-code, but it can be handled separately, the objective of this now is how to obtain the optimal schedule.</p> <h2 id="there-is-no-optimal-schedule">There is (no) optimal schedule</h2> <p>The paper cites Theorems which say that finding a schedule <strong>of arbitrary form</strong> is an undecidable problem. Because of this, we restrict ourselves to <strong>affine schedules</strong>, that is schedules of the form: \(\theta(S, \vec{i}) = \tau_S \vec{i} + \sigma_s \vec{n} + \alpha_s\) for each statement \(S\). The vector \(\vec{n}\) is the vector of parameters, for the example above the vector of length 1 containing \(n\). In this case the triplet \((\tau_S, \sigma_S, \alpha_S)\) completely define \(\theta\) (for a given \(S\)), so the goal is finding a \((\tau_S, \sigma_S, \alpha_S)\) triplet for each statement \(S\).</p> <h1 id="more-advanced-dependency-analysis">More advanced dependency analysis</h1> <h2 id="depth">Depth</h2> <p>Descriptions such as GDG and DDG can enable some optimisations.</p> <p>The <strong>depth</strong> of an edge is the position until which both instances at the start and the end of the edge share values, and after which the end instance has a larger value, that is \(p_ e\) is the depth of edge \(e\) iff \((\vec{i'}, \vec{i}) \in \mathscr{R} _ e\) and \(i'_ k = i_ k\) for \(1 \le k \le p_ e\) and \(i'_ {p_ e} &lt; i_ {p_ e}\) where \(\vec{i'} = (i'_ 1, i'_ 2, \ldots)\) and \(\vec{i} = (i_ 1, i_2, \ldots)\).</p> <p>In the example, both edges of the GDG have depth 1:</p> <ul> <li>\(\mathscr{R}_{1, 2} = \{ \bigl( i', (i, j) \bigr) : i' = i \}\),</li> <li>\(\mathscr{R}_{2, 2} = \{ \bigl( (i', j'), (i, j) : i' = i \land j' &lt; j \}\).</li> </ul> <p>In both cases the \(i'=i\) part implies depth \(p_e \ge 1\) and the rest ensures \(p _e \le 1\).</p> <p>This can be used to infer, that we are allowed to execute the outermost loop in parallel.</p> <h2 id="dependence-direction-vectors">Dependence direction vectors</h2> <p>A more detailed description of the dependencies can be given using symbols such as \(&lt;, \le, =, *, \ldots\) combined in a <strong>dependence direction vector</strong> (the asterisk denotes a wildcard, meaning any relation). Depth can be expressed with DDVs as</p> \[(\overbrace{=, \ldots, =}^{p_e}, &lt;, *, \ldots)\] <h2 id="uniform-dependence">Uniform dependence</h2> <p>The case where there is a constant difference between the instances of both ends of an edge, that is when \(i' = i + d\) if \((i', i) \in \mathscr{R}_ e\), the edge \(e\) is said to have a <strong>uniform dependence</strong>. In this case, instead of keeping track of \(\mathscr{D}_ {\sigma(e)}\), \(\mathscr{D}_ {\delta(e)}\) and the set of \((\vec{i'}, \vec{i})\) pairs, we can just keep track of a single set (polyhedron) of instances \(\mathscr{P}_ e\) and a affine map \(h_ e\) such that \(y \in \mathscr{P}_ e \implies y \in \mathscr{D}_ {\delta(e)} \land h_e(y) \in \mathscr{D} _{\sigma(e)}\) and then</p> \[(\vec{i'}, \vec{i}) \in \mathscr{R}_ e \iff \vec{i'} = h_ e(\vec{i}) \land \vec{i} \in \mathscr{P}_e\] <p>A more detailed analysis shows that the second edge of our example has such a uniform dependency.</p> <h2 id="dataflow-analysis">Dataflow analysis</h2> <p>A little more advanced (but still very much conservative) dataflow analysis can further restrict the polyhedrons \(\mathscr{R} _{1, 2}\) and \(\mathscr{R} _{2, 2}\). The analysis of the memory reads and writes tells us that only the entries of <code class="language-plaintext highlighter-rouge">a[i]</code> updated, they are updated independently for each index \(i\), and making no assumptions about the <code class="language-plaintext highlighter-rouge">+</code> operation (such as associativity, which <em>could</em> be used for further optimisations), we observe that</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">a[i]</code> is initialised in statement \(S_ 1\) and only the first iteration of the \(j\) loop depends on it: \(\bigl(i', (i, j) \bigr) \in \mathscr{R}_ {1,2} \iff i' = i \land j = 0\) (I think there is a typo in the paper saying \(j = 1\)?). This is reduced as:</p> \[\mathscr{P}_ {e _1} = \mathscr{D}_2 \cap \{ (i, j) : j \le 0 \}, \quad h _{e _1}(i, j) = i\] </li> <li> <p><code class="language-plaintext highlighter-rouge">a[i]</code> is updated with each iteration of \(j\), so every iteration (instance) of \(j\) depends only on the previous iteration (\(j - 1\)), and this only applies starting from the second iteration (\(j \ge 1\)): \(\bigl( (i', j'), (i, j) \bigr) \in \mathscr{R} _{2,2} \iff i' = i \land j' = j - 1 \land j \ge 1\) (Again, this might be a typo \(j \ge 2\) in the paper?) This is reduced as:</p> \[\mathscr{P} _{e _2} = \mathscr{D} _2 \cap \{ (i, j) : j \ge 1 \}, \quad h _{e _2}(i, j) = (i, j - 1)\] </li> </ul> <p>We will continue with these reduced forms.</p> <h1 id="formulating-the-integer-linear-program">Formulating the integer linear program</h1> <h2 id="describing-verticesdomains">Describing vertices/domains</h2> <p>The \(\mathscr{D}_ S\) domains (including the parameters, represented as \(\vec{n}\)) need to be rewritten in the form where given the parameters \(\vec{n}\) the instance \(\vec{i}\) is in domaind \(\mathscr{D} _S\) iff:</p> \[a_{S_k} \begin{pmatrix} \vec{i} \\ \vec{n} \end{pmatrix} + b_{S_k} \ge 0 \quad (\forall k=1, \ldots m_S)\] <p>This way, the \((a_ {S_ k}, b_ {S_ k})\) pairs completely describe \(\mathscr{D} _S\) (that is, you can use these vectors to represent them in a computer program).</p> \[\begin{align} \mathscr{D}_1 &amp;= \{ i : 0 \le i \le n \} \\&amp;= \{ i : 0 \le i \land 0 \le n - i \} \\ \mathscr{D}_2 &amp;= \{ (i, j) : 0 \le i, j \le n \} \\ &amp;= \{ (i, j) : 0 \le i \land 0 \le n - i \land 0 \le j \land 0 \le n - j \} \end{align}\] <p>In the example of \(\mathscr{D} _1\) there are two inequalities, implying \(m _1 = 2\):</p> \[0 \le i = (1, 0) \begin{pmatrix} i \\ n \end{pmatrix} + 0\] <p>implies \(a _{S _1} = (1, 0)\) and \(b _{S _1} = 0\) and</p> \[0 \le n - i = (-1, 1) \begin{pmatrix} i \\ n \end{pmatrix} + 0\] <p>implies \(a _{S _2} = (-1, 1)\) and \(b _{S _2} = 0\).</p> <p>Domain \(\mathscr{D} _2\) can be described with \(m _2 = 4\) such equations.</p> <h2 id="describing-edgesdependencies">Describing edges/dependencies</h2> <p>The edges \(\mathscr{R}_ e\) of the GDG is described by \((c_e, d_e)\) such that:</p> \[c _{e _k} \begin{pmatrix} \vec{i'} \\ \vec{i} \\ \vec{n} \end{pmatrix} + d_ {e_k} \ge 0 \quad (\forall k=1, \ldots m _e)\] <p>or for a restricted schedule with the affine map \(\vec{i'} = h_e(\vec{i})\) and the rewritten reduced domain \(\mathscr{P} _e\):</p> \[c_{e_k} \begin{pmatrix} \vec{i} \\ \vec{n} \end{pmatrix} + d_{e_k} \ge 0 \quad (\forall k=1, \ldots m_S)\] <p>The reduced domains \(\mathscr{P} _{e _1}\) and \(\mathscr{P} _{ e _2}\) can be described similarly as the other domains \(\mathscr{D} _1\) and \(\mathscr{D} _2\).</p> <h2 id="describing-schedules">Describing schedules</h2> <p>The schedule \(\theta(S, \vec{i})\) is also going to be rewritten using a set of \(\mu\) Farkas multipliers. For each statement \(S\) we assume that the schedule can be expressed as:</p> \[\theta(S, \vec{i}) \equiv \mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \Bigl( a_{S_k} \begin{pmatrix} \vec{i} \\ n \end{pmatrix} + b_{S_k} \Bigr)\] <p>This captures the information provided by the domains \(\mathscr{D} _S\) captured in the (\(m _S\) number of) \((a _{S _k}, b _{S _k})\) pairs. To combine this with the information from the dependencies/edges we will need the <em>delay</em> corresponding to the edges.</p> <h2 id="the-delay">The delay</h2> <p>We assume that if the instance \(\vec{i}\) of a statement \(S\) depends on the instance \(\vec{i'}\) of the statement \(S'\), then there is a <strong>delay</strong> \(\Delta\) associated with that dependency/edge \(e\). This means that the date of \(S, \vec{i}\) assigned by the schedule \(\theta\) is greater (by at least \(1\)) than the date of \(S', \vec{i'}\):</p> \[\Delta = \theta(S, \vec{i}) - \theta(S', \vec{i'}) - 1 \ge 0\] <p>We assume that this delay can be rewritten with a different set of \(\lambda\) Farkas multipliers (these will be just placeholders to express dependencies between inequalities across inequalities resulting from the dependencies/edges).</p> \[\Delta \equiv \lambda_{e_0} + \sum_{k=1}^{m_e} \lambda_{e_k} \Bigl( c_{e_k} \begin{pmatrix} \vec{i} \\ n \end{pmatrix} + d_{e_k} \Bigr)\] <h1 id="putting-it-all-together">Putting it all together</h1> <p>The \(\equiv\) in the last equation was alluding to the next step where we combine the “\(\theta\) equations” expressing the domains and the “\(\Delta\) equations” expressing the dependencies.</p> \[\theta(S, \vec{i}) - \theta(S', \vec{i'}) - 1 \equiv \Delta \ge 0\] <p>On the left side of \(\equiv\) in the expression above we use two instances of the “\(\theta\) equations” (with \(a _S{ _k}\), \(b _S{ _k}\) and \(\mu _S{ _k}\)), on the right “\(\Delta\) equations” (with \(c _{e _k}\), \(d _{e _k}\) and \(\lambda _{e _k}\)) and solve the ILP for the \(\mu _{S _k}\) variables (for each statement \(S\)).</p> <h2 id="edge-e_1--1-to-2">Edge \(e_1 : 1 \to 2\)</h2> <p>For the first edge \(e _1\) between statement \(S_1\) to \(S_2\) the equations from above give rise to the following</p> \[\begin{align*} &amp;\bigl[\mu_{2, 0} + \mu_{2, 1} i + \mu_{2, 2} (n - i) + \mu_{2, 3} j + \mu_{2, 4} (n - j) \bigr] \\ -&amp; \bigl[\mu_{1, 0} + \mu_{1, 1} i + \mu_{1, 2} (n - i) \bigr] - 1 \\ \equiv&amp; \lambda_{1, 0} + \lambda_{1, 1} i + \lambda_{1, 2} (n - i) + \lambda_{1, 3} j + \lambda_{1, 4} (n - j) - \lambda_{1, 5} j \ge 0 \end{align*}\] <p>The first and second line (except the \(-1\) at the end of it) of the ILP come from the rewritten form of \(\mathscr{D}_2\) and \(\mathscr{D}_1\) from the <a href="#describing-verticesdomains">Describing vertices/domains</a> section, plugged in the “\(\Theta\) equation”, while the third line is the result of taking \(\mathscr{P} _{e _1}\) <a href="#dataflow-analysis">Dataflow analysis</a>, which is \(-j \ge 0\) and the inequalities from the \(\mathscr{D} _2\) (hence the similarity to the first line).</p> <p>The previous equation is equivalent to the following system of equations by equating the coefficients of \(i\), \(j\), \(n\) and the constant term.</p> \[\begin{align} \mu_{2, 0} - \mu_{1, 0} - 1 &amp;= \lambda_{1, 0} &amp;\text{const. terms}\\ \mu_{2, 1} - \mu_{2, 2} - \mu_{1, 1} + \mu_{1, 2} &amp;= \lambda_{1, 1} - \lambda_{1, 2} &amp;\text{$i$ terms}\\ \mu_{2, 3} - \mu_{2, 4} &amp;= \lambda_{1, 3} - \lambda_{1, 4} - \lambda_{1, 5} &amp;\text{$j$ terms}\\ \mu_{2, 2} + \mu_{2, 4} - \mu_{1, 2} &amp;= \lambda_{1, 2} + \lambda_{1, 4} &amp;\text{$n$ terms} \end{align}\] <h2 id="edge-e_2--2-to-2">Edge \(e_2 : 2 \to 2\)</h2> <p>The second edge is a <a href="#uniform-dependence">uniform dependency</a>, the schedule for the start and end of the edge, \(\theta(S _2, h(\vec{i}))\) and \(\theta(S _2, \vec{i})\) is nearly identical (difference highlighted in the formulae below).</p> \[\mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} (\begin{smallmatrix} {\color{magenta}{\vec{i}}} \\ n \end{smallmatrix}) + b_{S_k} \bigr) - \bigl[ \mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} (\begin{smallmatrix} \color{magenta}{h(\vec{i})} \\ n \end{smallmatrix}) + b_{S_k} \bigr) \bigr]\] <p>This results to most of the terms cancelling each other out in the expression \(\theta(S _2, \vec{i}) - \theta(S _1, h(\vec{i}))\) (written with the \(\mu _{S _k}\) Farkas multipliers):</p> \[\mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} \Bigl(\begin{smallmatrix} i \\ j \\ n \end{smallmatrix}\Bigr) + b_{S_k} \bigr) - \bigl[ \mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} \Bigl(\begin{smallmatrix} i \\ j \color{magenta}{-1} \\ n \end{smallmatrix}\Bigr) + b_{S_k} \bigr) \bigr]\] <p>As a result, the loop edge on \(S _2\) results in the following equation (not the lack of \(\lambda _{S _k}\) multipliers).</p> \[\Delta = \theta(S _2, i, j) - \theta(S _2, i, j - 1) - 1 = \mu_{2, 3} - \mu_{2, 4} - 1 \ge 0\] <h2 id="the-calculations">The calculations</h2> <p>Collecting and rearranging the inequalities for \(e _1 : S _1 \to S _2\) and \(e _2 : S _2 \to S _2\).</p> \[\begin{align} \lambda_{1, 0} =&amp; \mu_{2, 0} - \mu_{1, 0} - 1 \ge 0 \\ \lambda_{1, 1} =&amp; \mu_{2, 1} + \mu_{2, 4} - \mu_{1, 1} - \lambda_{1, 4} \ge 0 \\ \lambda_{1, 3} =&amp; \mu_{2, 3} - \mu_{2, 4} - \lambda_{1, 4} - \lambda_{1, 5} \ge 0 \\ \lambda_{1, 2} =&amp; \mu_{2, 2} + \mu_{2, 4} - \mu_{1, 2} - \lambda_{1, 4} \ge 0 \\ &amp; \mu_{2, 3} - \mu_{2, 4} - 1 \ge 0 \end{align}\] <p>Simplifying it gives:</p> \[\begin{align*} \mu_{2, 0} - \mu_{1, 0} - 1 \ge&amp; 0 \\ \mu_{2, 3} - \mu_{2, 4} - 1 \ge&amp; 0 \\ \mu_{2, 3} + \mu_{2, 4} - \mu_{1, 1} \ge&amp; 0 \\ \mu_{2, 2} + \mu_{2, 4} - \mu_{1, 2} \ge&amp; 0 \end{align*}\] <p>All these manipulations can be performed by algorithms automatically.</p> <h2 id="one-possible-result">One possible result</h2> <p>One valid choice for the \(\mu _{S _k}\) values is:</p> <ul> <li> \[\mu_{1, 0} = \mu_{2, 1} = \mu_{2, 2} = \mu_{2, 4} = \mu_{1, 1} = \mu_{1, 2} = 0\] </li> <li> \[\mu_{2, 0} = \mu_{2, 3} = 1\] </li> <li> \[\theta(1, i) = 0\] </li> <li> \[\theta(2, i, j) = j + 1\] </li> </ul> <h2 id="generated-code">Generated code</h2> <p>The resulting schedule is:</p> <ul> <li> \[\theta(S _1, i) = 0\] </li> <li> \[\theta(S _2, i, j) = j + 1\] </li> </ul> <p>Generating code from this is a separate task and will be disucussed in the next blog post, but the paper suggests something similar to:</p> <pre><code class="language-C++">#pragma omp parallel
for (i = 0; i &lt;= n; n++)
  a[i] = 0.0;
for (j = 0; j &lt;= n; j++)
  #pragma omp parallel
  for (i = 0; i &lt;= n; i++)
    a[i] += b[j] * M[i][j];
</code></pre> <h1 id="citing-this-blog-post">Citing this blog post</h1> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@misc{vatai2022polytutor1,
  title={Polyhedral compilation: part 1},
  url={https://vatai.github.io/math/compsci/polyhedral/polyhedral-compilation-part-1/},
  author={Vatai, Emil},
  year={2022},
  month={Feb}
}
</code></pre></div></div> <h1 id="feedback">Feedback</h1> <p>Feedback is very much welcome. I don’t have a comment section set up, but you can raise an <a href="https://github.com/vatai/vatai.github.io/issues">issue</a> on GitHub.</p>]]></content><author><name></name></author><category term="math"/><category term="compsci"/><category term="polyhedral"/><summary type="html"><![CDATA[Abstract]]></summary></entry><entry><title type="html">Installing PyTorch with MPI support on ABCI</title><link href="https://vatai.github.io/blog/2021/Installing-PyTorch-with-MPI-support-on-ABCI/" rel="alternate" type="text/html" title="Installing PyTorch with MPI support on ABCI"/><published>2021-09-01T08:00:00+00:00</published><updated>2021-09-01T08:00:00+00:00</updated><id>https://vatai.github.io/blog/2021/Installing-PyTorch-with-MPI-support-on-ABCI</id><content type="html" xml:base="https://vatai.github.io/blog/2021/Installing-PyTorch-with-MPI-support-on-ABCI/"><![CDATA[<p>To get MPI backend for <a href="https://pytorch.org/docs/stable/distributed.html"><code class="language-plaintext highlighter-rouge">torch distributed</code></a> working you need to recompile PyTorch.</p> <p>On ABCI to get this working, you need to load these modules (some of them might be not needed, I just grabbed a <code class="language-plaintext highlighter-rouge">modules.sh</code> file):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module load gcc/9.3.0
module load cuda/11.2/11.2.2
module load cudnn/8.1/8.1.1
module load nccl/2.8/2.8.4-1
module load openmpi/4.0.5
module load python/3.8/3.8.7
module load cmake/3.19
</code></pre></div></div> <p>After this we just need to clone the PyTorch repo:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:pytorch/pytorch.git
</code></pre></div></div> <p>and build it:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 setup.py develop --user
</code></pre></div></div> <p>This <strong>overwrites</strong> your current PyTorch installation, and you need to use <code class="language-plaintext highlighter-rouge">--upgrade --forece-reinstall</code> with <code class="language-plaintext highlighter-rouge">pip3</code> to install the original one.</p>]]></content><author><name></name></author><category term="tutorial"/><category term="MPI"/><category term="ABCI"/><summary type="html"><![CDATA[To get MPI backend for torch distributed working you need to recompile PyTorch.]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://vatai.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2021/distill</id><content type="html" xml:base="https://vatai.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>In fact, you can also use a single dollar sign <code class="language-plaintext highlighter-rouge">$</code> to create inline formulas, such as <code class="language-plaintext highlighter-rouge">$ E = mc^2 $</code>, which will render as $ E = mc^2 $. This approach provides the same effect during TeX-based compilation, but visually it appears slightly less bold compared to double-dollar signs <code class="language-plaintext highlighter-rouge">$$</code>, making it blend more naturally with surrounding text.</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can instead use the standard Jekyll syntax highlight with the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag.</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <p>You can also write standard Markdown code blocks in triple ticks with a language tag, for instance:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
  <span class="k">return</span> <span class="n">x</span>
</code></pre></div></div> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="mermaid">Mermaid</h2> <p>This theme supports creating diagrams directly in markdown using <a href="https://mermaid.js.org/">Mermaid</a>. Mermaid enables users to render flowcharts, sequence diagrams, class diagrams, Gantt charts, and more. Simply embed the diagram syntax within a mermaid code block.</p> <p>To create a Gantt chart, you can use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">mermaid
</span><span class="sb">gantt
    dateFormat  YYYY-MM-DD
    title A Gantt Diagram

    section Section
    Task A           :a1, 2025-01-01, 30d
    Task B           :after a1, 20d
    Task C           :2025-01-10, 12d</span>
<span class="p">```</span>
</code></pre></div></div> <p>And here’s how it will be rendered:</p> <pre><code class="language-mermaid">gantt
    dateFormat  YYYY-MM-DD
    title A Gantt Diagram

    section Section
    Task A           :a1, 2025-01-01, 30d
    Task B           :after a1, 20d
    Task C           :2025-01-10, 12d
</code></pre> <p>Similarly, you can also use it to create beautiful class diagrams:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```mermaid
classDiagram
direction LR
    class Animal {
        +String species
        +int age
        +makeSound()
    }
    class Dog {
        +String breed
        +bark()
    }
    class Cat {
        +String color
        +meow()
    }
    class Bird {
        +String wingSpan
        +fly()
    }
    class Owner {
        +String name
        +int age
        +adoptAnimal(Animal animal)
    }

    Animal &lt;|-- Dog
    Animal &lt;|-- Cat
    Animal &lt;|-- Bird
    Owner "1" --&gt; "0..*" Animal

    Dog : +fetch()
    Cat : +purr()
    Bird : +sing()
```
</code></pre></div></div> <p>It will be presented as:</p> <pre><code class="language-mermaid">classDiagram
direction LR
    class Animal {
        +String species
        +int age
        +makeSound()
    }
    class Dog {
        +String breed
        +bark()
    }
    class Cat {
        +String color
        +meow()
    }
    class Bird {
        +String wingSpan
        +fly()
    }
    class Owner {
        +String name
        +int age
        +adoptAnimal(Animal animal)
    }

    Animal &lt;|-- Dog
    Animal &lt;|-- Cat
    Animal &lt;|-- Bird
    Owner "1" --&gt; "0..*" Animal

    Dog : +fetch()
    Cat : +purr()
    Bird : +sing()
</code></pre> <p>With Mermaid, you can easily add clear and dynamic diagrams to enhance your blog content.</p> <hr/> <h2 id="diff2html">Diff2Html</h2> <p>This theme also supports integrating <a href="https://github.com/rtfpessoa/diff2html">Diff2Html</a>, a tool that beautifully renders code differences (diffs) directly in markdown. Diff2Html is ideal for showcasing code changes, allowing you to clearly present additions, deletions, and modifications. It’s perfect for code reviews, documentation, and tutorials where step-by-step code changes need to be highlighted—you can even introduce changes across multiple files at once.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/utils/mathUtils.js b/utils/mathUtils.js
index 3b5f3d1..c7f9b2e 100644
--- a/utils/mathUtils.js
+++ b/utils/mathUtils.js
@@ -1,8 +1,12 @@
-// Basic math utilities
+// Extended math utilities with additional functions

-export function calculateArea(radius) {
-    const PI = 3.14159;
+export function calculateCircleMetrics(radius) {
+    const PI = Math.PI;
     const area = PI * radius ** 2;
+    const circumference = 2 * PI * radius;
+
+    if (!isValidRadius(radius)) throw new Error("Invalid radius");
+
     return { area, circumference };
 }

-export function validateRadius(radius) {
+export function isValidRadius(radius) {
     return typeof radius === 'number' &amp;&amp; radius &gt; 0;
 }

diff --git a/main.js b/main.js
index 5f6a9c3..b7d4e8f 100644
--- a/main.js
+++ b/main.js
@@ -2,9 +2,12 @@
 import { calculateCircleMetrics } from './utils/mathUtils';

-function displayCircleMetrics(radius) {
-    const { area } = calculateCircleMetrics(radius);
+function displayCircleMetrics(radius) {
+    const { area, circumference } = calculateCircleMetrics(radius);
     console.log(`Area: ${area}`);
+    console.log(`Circumference: ${circumference}`);
 }

-displayCircleMetrics(5);
+try {
+    displayCircleMetrics(5);
+} catch (error) {
+    console.error("Error:", error.message);
+}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Here’s how it will look when rendered with Diff2Html:</p> <pre><code class="language-diff2html">diff --git a/utils/mathUtils.js b/utils/mathUtils.js
index 3b5f3d1..c7f9b2e 100644
--- a/utils/mathUtils.js
+++ b/utils/mathUtils.js
@@ -1,8 +1,12 @@
-// Basic math utilities
+// Extended math utilities with additional functions

-export function calculateArea(radius) {
-    const PI = 3.14159;
+export function calculateCircleMetrics(radius) {
+    const PI = Math.PI;
     const area = PI * radius ** 2;
+    const circumference = 2 * PI * radius;
+
+    if (!isValidRadius(radius)) throw new Error("Invalid radius");
+
     return { area, circumference };
 }

-export function validateRadius(radius) {
+export function isValidRadius(radius) {
     return typeof radius === 'number' &amp;&amp; radius &gt; 0;
 }

diff --git a/main.js b/main.js
index 5f6a9c3..b7d4e8f 100644
--- a/main.js
+++ b/main.js
@@ -2,9 +2,12 @@
 import { calculateCircleMetrics } from './utils/mathUtils';

-function displayCircleMetrics(radius) {
-    const { area } = calculateCircleMetrics(radius);
+function displayCircleMetrics(radius) {
+    const { area, circumference } = calculateCircleMetrics(radius);
     console.log(`Area: ${area}`);
+    console.log(`Circumference: ${circumference}`);
 }

-displayCircleMetrics(5);
+try {
+    displayCircleMetrics(5);
+} catch (error) {
+    console.error("Error:", error.message);
+}
</code></pre> <hr/> <h2 id="leaflet">Leaflet</h2> <p><a href="https://leafletjs.com/">Leaflet</a> is created by Ukrainian software engineer <a href="https://agafonkin.com/">Volodymyr Agafonkin</a>, allowing interactive maps to be embedded in webpages. With support for <a href="https://geojson.org/">GeoJSON data</a>, Leaflet allows you to highlight specific regions, making it easy to visualize geographical information in detail.</p> <p>You can use the following code to load map information on <a href="https://www.openstreetmap.org/">OpenStreetMap</a>:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Crimea",
        "popupContent": "Occupied Crimea"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              33.9,
              45.3
            ],
            [
              36.5,
              45.3
            ],
            [
              36.5,
              44.4
            ],
            [
              33.9,
              44.4
            ],
            [
              33.9,
              45.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Donetsk",
        "popupContent": "Occupied Donetsk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              37.5,
              48.5
            ],
            [
              39.5,
              48.5
            ],
            [
              39.5,
              47.5
            ],
            [
              37.5,
              47.5
            ],
            [
              37.5,
              48.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Luhansk",
        "popupContent": "Occupied Luhansk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              38.5,
              49.5
            ],
            [
              40.5,
              49.5
            ],
            [
              40.5,
              48.5
            ],
            [
              38.5,
              48.5
            ],
            [
              38.5,
              49.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Kherson",
        "popupContent": "Occupied Kherson"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              32.3,
              47.3
            ],
            [
              34.3,
              47.3
            ],
            [
              34.3,
              46.3
            ],
            [
              32.3,
              46.3
            ],
            [
              32.3,
              47.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Zaporizhzhia",
        "popupContent": "Occupied Zaporizhzhia"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              34.3,
              48
            ],
            [
              36.3,
              48
            ],
            [
              36.3,
              47
            ],
            [
              34.3,
              47
            ],
            [
              34.3,
              48
            ]
          ]
        ]
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>The rendered map below highlights the regions of Ukraine that have been illegally occupied by Russia over the years, including Crimea and the four eastern regions:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Crimea",
        "popupContent": "Occupied Crimea"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              33.9,
              45.3
            ],
            [
              36.5,
              45.3
            ],
            [
              36.5,
              44.4
            ],
            [
              33.9,
              44.4
            ],
            [
              33.9,
              45.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Donetsk",
        "popupContent": "Occupied Donetsk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              37.5,
              48.5
            ],
            [
              39.5,
              48.5
            ],
            [
              39.5,
              47.5
            ],
            [
              37.5,
              47.5
            ],
            [
              37.5,
              48.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Luhansk",
        "popupContent": "Occupied Luhansk"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              38.5,
              49.5
            ],
            [
              40.5,
              49.5
            ],
            [
              40.5,
              48.5
            ],
            [
              38.5,
              48.5
            ],
            [
              38.5,
              49.5
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Kherson",
        "popupContent": "Occupied Kherson"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              32.3,
              47.3
            ],
            [
              34.3,
              47.3
            ],
            [
              34.3,
              46.3
            ],
            [
              32.3,
              46.3
            ],
            [
              32.3,
              47.3
            ]
          ]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Zaporizhzhia",
        "popupContent": "Occupied Zaporizhzhia"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          [
            [
              34.3,
              48
            ],
            [
              36.3,
              48
            ],
            [
              36.3,
              47
            ],
            [
              34.3,
              47
            ],
            [
              34.3,
              48
            ]
          ]
        ]
      }
    }
  ]
}
</code></pre> <hr/> <h2 id="chartjs-echarts-and-vega-lite">Chartjs, Echarts and Vega-Lite</h2> <p><a href="https://www.chartjs.org/">Chart.js</a> is a versatile JavaScript library for creating responsive and interactive charts. Supporting multiple chart types like bar, line, pie, and radar, it’s an ideal tool for visualizing data directly in webpages.</p> <p>Here’s an example of a JSON-style configuration that creates a bar chart in Chart.js:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```chartjs
{
  "type": "bar",
  "data": {
    "labels": ["2017", "2018", "2019", "2020", "2021"],
    "datasets": [
      {
        "label": "Population (millions)",
        "data": [12, 15, 13, 14, 16],
        "backgroundColor": "rgba(54, 162, 235, 0.6)",
        "borderColor": "rgba(54, 162, 235, 1)",
        "borderWidth": 1
      }
    ]
  },
  "options": {
    "scales": {
      "y": {
        "beginAtZero": true
      }
    }
  }
}
```
</code></pre></div></div> <p>The rendered bar chart illustrates population data from 2017 to 2021:</p> <pre><code class="language-chartjs">{
  "type": "bar",
  "data": {
    "labels": ["2017", "2018", "2019", "2020", "2021"],
    "datasets": [
      {
        "label": "Population (millions)",
        "data": [12, 15, 13, 14, 16],
        "backgroundColor": "rgba(54, 162, 235, 0.6)",
        "borderColor": "rgba(54, 162, 235, 1)",
        "borderWidth": 1
      }
    ]
  },
  "options": {
    "scales": {
      "y": {
        "beginAtZero": true
      }
    }
  }
}
</code></pre> <hr/> <p><a href="https://echarts.apache.org/">ECharts</a> is a powerful visualization library from <a href="https://www.apache.org/">Apache</a> that supports a wide range of interactive charts, including more advanced types such as scatter plots, heatmaps, and geographic maps.</p> <p>The following JSON configuration creates a visually enhanced line chart that displays monthly sales data for two products.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```echarts
{
  "title": {
    "text": "Monthly Sales Comparison",
    "left": "center"
  },
  "tooltip": {
    "trigger": "axis",
    "backgroundColor": "rgba(50, 50, 50, 0.7)",
    "borderColor": "#777",
    "borderWidth": 1,
    "textStyle": {
      "color": "#fff"
    }
  },
  "legend": {
    "data": ["Product A", "Product B"],
    "top": "10%"
  },
  "xAxis": {
    "type": "category",
    "data": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    }
  },
  "yAxis": {
    "type": "value",
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    },
    "splitLine": {
      "lineStyle": {
        "type": "dashed"
      }
    }
  },
  "series": [
    {
      "name": "Product A",
      "type": "line",
      "smooth": true,
      "data": [820, 932, 901, 934, 1290, 1330, 1320, 1400, 1450, 1500, 1600, 1650],
      "itemStyle": {
        "color": "#5470C6"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(84, 112, 198, 0.5)" },
            { "offset": 1, "color": "rgba(84, 112, 198, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    },
    {
      "name": "Product B",
      "type": "line",
      "smooth": true,
      "data": [620, 732, 701, 734, 1090, 1130, 1120, 1200, 1250, 1300, 1400, 1450],
      "itemStyle": {
        "color": "#91CC75"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(145, 204, 117, 0.5)" },
            { "offset": 1, "color": "rgba(145, 204, 117, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    }
  ]
}
```
</code></pre></div></div> <p>The rendered output is shown below, and you can also interact with it using your mouse:</p> <pre><code class="language-echarts">{
  "title": {
    "text": "Monthly Sales Comparison",
    "left": "center"
  },
  "tooltip": {
    "trigger": "axis",
    "backgroundColor": "rgba(50, 50, 50, 0.7)",
    "borderColor": "#777",
    "borderWidth": 1,
    "textStyle": {
      "color": "#fff"
    }
  },
  "legend": {
    "data": ["Product A", "Product B"],
    "top": "10%"
  },
  "xAxis": {
    "type": "category",
    "data": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    }
  },
  "yAxis": {
    "type": "value",
    "axisLine": {
      "lineStyle": {
        "color": "#888"
      }
    },
    "splitLine": {
      "lineStyle": {
        "type": "dashed"
      }
    }
  },
  "series": [
    {
      "name": "Product A",
      "type": "line",
      "smooth": true,
      "data": [820, 932, 901, 934, 1290, 1330, 1320, 1400, 1450, 1500, 1600, 1650],
      "itemStyle": {
        "color": "#5470C6"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(84, 112, 198, 0.5)" },
            { "offset": 1, "color": "rgba(84, 112, 198, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    },
    {
      "name": "Product B",
      "type": "line",
      "smooth": true,
      "data": [620, 732, 701, 734, 1090, 1130, 1120, 1200, 1250, 1300, 1400, 1450],
      "itemStyle": {
        "color": "#91CC75"
      },
      "lineStyle": {
        "width": 3
      },
      "areaStyle": {
        "color": {
          "type": "linear",
          "x": 0,
          "y": 0,
          "x2": 0,
          "y2": 1,
          "colorStops": [
            { "offset": 0, "color": "rgba(145, 204, 117, 0.5)" },
            { "offset": 1, "color": "rgba(145, 204, 117, 0)" }
          ]
        }
      },
      "emphasis": {
        "focus": "series"
      }
    }
  ]
}
</code></pre> <hr/> <p><a href="https://vega.github.io/vega-lite/">Vega-Lite</a> is a declarative visualization grammar that allows users to create, share, and customize a wide range of interactive data visualizations. The following JSON configuration generates a straightforward bar chart:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```vega_lite
{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 200,
  "padding": 5,

  "data": [
    {
      "name": "table",
      "values": [
        {"category": "A", "value": 28},
        {"category": "B", "value": 55},
        {"category": "C", "value": 43},
        {"category": "D", "value": 91},
        {"category": "E", "value": 81},
        {"category": "F", "value": 53},
        {"category": "G", "value": 19},
        {"category": "H", "value": 87}
      ]
    }
  ],

  "scales": [
    {
      "name": "xscale",
      "type": "band",
      "domain": {"data": "table", "field": "category"},
      "range": "width",
      "padding": 0.1
    },
    {
      "name": "yscale",
      "type": "linear",
      "domain": {"data": "table", "field": "value"},
      "nice": true,
      "range": "height"
    }
  ],

  "axes": [
    {"orient": "bottom", "scale": "xscale"},
    {"orient": "left", "scale": "yscale"}
  ],

  "marks": [
    {
      "type": "rect",
      "from": {"data": "table"},
      "encode": {
        "enter": {
          "x": {"scale": "xscale", "field": "category"},
          "width": {"scale": "xscale", "band": 0.8},
          "y": {"scale": "yscale", "field": "value"},
          "y2": {"scale": "yscale", "value": 0},
          "fill": {"value": "steelblue"}
        },
        "update": {
          "fillOpacity": {"value": 1}
        },
        "hover": {
          "fill": {"value": "orange"}
        }
      }
    }
  ]
}
```
</code></pre></div></div> <p>The rendered output shows a clean and simple bar chart with a hover effect：</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "width": 400,
  "height": 200,
  "padding": 5,

  "data": [
    {
      "name": "table",
      "values": [
        {"category": "A", "value": 28},
        {"category": "B", "value": 55},
        {"category": "C", "value": 43},
        {"category": "D", "value": 91},
        {"category": "E", "value": 81},
        {"category": "F", "value": 53},
        {"category": "G", "value": 19},
        {"category": "H", "value": 87}
      ]
    }
  ],

  "scales": [
    {
      "name": "xscale",
      "type": "band",
      "domain": {"data": "table", "field": "category"},
      "range": "width",
      "padding": 0.1
    },
    {
      "name": "yscale",
      "type": "linear",
      "domain": {"data": "table", "field": "value"},
      "nice": true,
      "range": "height"
    }
  ],

  "axes": [
    {"orient": "bottom", "scale": "xscale"},
    {"orient": "left", "scale": "yscale"}
  ],

  "marks": [
    {
      "type": "rect",
      "from": {"data": "table"},
      "encode": {
        "enter": {
          "x": {"scale": "xscale", "field": "category"},
          "width": {"scale": "xscale", "band": 0.8},
          "y": {"scale": "yscale", "field": "value"},
          "y2": {"scale": "yscale", "value": 0},
          "fill": {"value": "steelblue"}
        },
        "update": {
          "fillOpacity": {"value": 1}
        },
        "hover": {
          "fill": {"value": "orange"}
        }
      }
    }
  ]
}
</code></pre> <hr/> <h2 id="tikz">TikZ</h2> <p><a href="https://tikz.net/">TikZ</a> is a powerful LaTeX-based drawing tool powered by <a href="https://tikzjax.com/">TikZJax</a>. You can easily port TikZ drawings from papers, posters, and notes. For example, we can use the following code to illustrate Euler’s formula $ e^{i \theta} = \cos \theta + i \sin \theta $:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/tikz"</span><span class="nt">&gt;</span>
<span class="se">\b</span>egin{tikzpicture}
    <span class="se">\f</span>illdraw[fill=cyan!10, draw=blue, thick] (0,0) circle (2cm);<span class="sb">

    \draw[-&gt;, thick] (-2.5,0) -- (2.5,0) node[right] {Re};
    \draw[-&gt;, thick] (0,-2.5) -- (0,2.5) node[above] {Im};

    \draw[-&gt;, thick, color=purple] (0,0) -- (1.5,1.5);
    \node[color=purple] at (1.1, 1.7) {$e^{i\theta}$};

    \draw[thick] (0.7,0) arc (0:45:0.7);
    \node at (0.9, 0.3) {$\theta$};

    \draw[dashed, color=gray] (1.5,1.5) -- (1.5,0) node[below, black] {$\cos \theta$};
    \draw[dashed, color=gray] (1.5,1.5) -- (0,1.5) node[left, black] {$\sin \theta$};
    \node at (2.2, 0) [below] {1}; 
    \node at (0, 2.2) [left] {$i$}; 
    \node at (1.5,1.5) [above right, color=blue] {$(\cos \theta \, \sin \theta)$}; 
</span><span class="se">\e</span>nd{tikzpicture}
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <p>The rendered output is shown below, displayed as a vector graphic：</p> <script type="text/tikz">
\begin{tikzpicture}
    \filldraw[fill=cyan!10, draw=blue, thick] (0,0) circle (2cm);

    \draw[->, thick] (-2.5,0) -- (2.5,0) node[right] {Re};
    \draw[->, thick] (0,-2.5) -- (0,2.5) node[above] {Im};

    \draw[->, thick, color=purple] (0,0) -- (1.5,1.5);
    \node[color=purple] at (1.1, 1.7) {$e^{i\theta}$};

    \draw[thick] (0.7,0) arc (0:45:0.7);
    \node at (0.9, 0.3) {$\theta$};

    \draw[dashed, color=gray] (1.5,1.5) -- (1.5,0) node[below, black] {$\cos \theta$};
    \draw[dashed, color=gray] (1.5,1.5) -- (0,1.5) node[left, black] {$\sin \theta$};
    \node at (2.2, 0) [below] {1}; 
    \node at (0, 2.2) [left] {$i$}; 
    \node at (1.5,1.5) [above right, color=blue] {$(\cos \theta \, \sin \theta)$}; 
\end{tikzpicture}
</script> <hr/> <h2 id="typograms">Typograms</h2> <p><a href="https://google.github.io/typograms/">Typograms</a> are a way of combining text and graphics to convey information in a clear and visually engaging manner. Typograms are particularly effective for illustrating simple diagrams, charts, and concept visuals where text and graphics are closely integrated. The following example demonstrates a simple Typogram:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```typograms
             ___________________
            /                  /|
           /__________________/ |
          |                  |  |
          |     Distill      |  |
          |                  |  |
          |                  | /
          |__________________|/
```
</code></pre></div></div> <p>The rendered output is shown below：</p> <pre><code class="language-typograms">             ___________________
            /                  /|
           /__________________/ |
          |                  |  |
          |     Distill      |  |
          |                  |  |
          |                  | /
          |__________________|/
</code></pre> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry></feed>