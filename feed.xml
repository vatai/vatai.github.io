<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://vatai.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://vatai.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-20T16:34:10+00:00</updated><id>https://vatai.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">a post with image galleries</title><link href="https://vatai.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://vatai.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://vatai.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">[DRAFT] Flattening loops of combinations, again!?</title><link href="https://vatai.github.io/blog/2024/flattening-loops-again/" rel="alternate" type="text/html" title="[DRAFT] Flattening loops of combinations, again!?"/><published>2024-12-03T00:00:00+00:00</published><updated>2024-12-03T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2024/flattening-loops-again</id><content type="html" xml:base="https://vatai.github.io/blog/2024/flattening-loops-again/"><![CDATA[<p>We had problems implementing the 3x1 flattened four nested loops generating 4-combinations in <a class="citation" href="#dash2021scaling">(Dash et al., 2021)</a>.</p> \[\begin{align*} q &amp;\gets (\sqrt{729 \lambda^2 -3} + 27 \lambda)^{1/3} \\ k &amp;\gets \lfloor (q/3^2)^{1/3} + 1/(3q)^{1/3} - 1 \rfloor \\ T_z &amp;\gets k (k + 1) (k + 2) / 6 \\ \lambda' &amp;= \lambda - T_z \\ j &amp;\gets \lfloor \sqrt{1/4 + 2\lambda'} -1/2 \rfloor \\ i &amp;\gets \lambda' - j (j + 1) / 2 \end{align*}\]]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[We had problems implementing the 3x1 flattened four nested loops generating 4-combinations in (Dash et al., 2021).]]></summary></entry><entry><title type="html">Flattening loops of combinations</title><link href="https://vatai.github.io/blog/2024/flattening-loops-of-combinations/" rel="alternate" type="text/html" title="Flattening loops of combinations"/><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2024/flattening-loops-of-combinations</id><content type="html" xml:base="https://vatai.github.io/blog/2024/flattening-loops-of-combinations/"><![CDATA[<p>In <a class="citation" href="#dash2021scaling">(Dash et al., 2021; Al Hajri et al., 2020)</a>, when iterating through all 2-hit combinations (of \(G\) number of genes), the outer two \(i\) and \(j\) loops are “flattened” into a single \(\lambda\) loop (\(\lambda \gets 1\ldots\binom{G}{2}\)). To reconstruct the \(i\) and \(j\) the following formulas are used:</p> \[\begin{align} j &amp;= \lfloor \sqrt{1/4 + 2 \lambda} + 1/2 \rfloor \\ i &amp;= \lambda - j (j - 1) / 2 \end{align}\] <p>Let’s try to derive those formulas.</p> <p>It is easy to spot the \(S_{j-1} := \sum_{t=1}^{j-1} t = \frac{j (j - 1)}{2}\) formula for the sum of all positive integers going up to \(j-1\). Which leads us to:</p> \[\lambda = i + \frac{j(j - 1)}{2} = i + \sum_{t=1}^{j-1} t\] <p>The same \(S_{j-1}\) formula is also present in the expression for \(j\) (we begin by removing the \(\lfloor \cdot \rfloor\)):</p> \[\begin{align} j &amp;= \sqrt{1/4 + 2 \lambda} + 1/2 \\ j - 1/2 &amp;= \sqrt{1/4 + 2 \lambda} \\ (j - 1/2)^2 &amp;= 1/4 + 2 \lambda \\ j^2 - j + 1/4 &amp;= 1/4 + 2 \lambda \\ j^2 - j &amp;= 2 \lambda \\ \lambda &amp;= \frac{j (j-1)}{2} \end{align}\] <p>According to <a class="citation" href="#dash2021scaling">(Dash et al., 2021; Al Hajri et al., 2020)</a> this flattened \(\lambda\) loop corresponds to the following \(i\) and \(j\) loop:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 : 0 1
2 : 0 2
3 : 0 3
4 : 0 4
5 : 1 2
6 : 1 3
7 : 1 4
8 : 2 3
9 : 2 4
10 : 3 4
</code></pre></div></div> <p>If we implement the flattened loop we see that this is only true in the sense that the set of visited combination is the same, however, the order is different.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">Nc2</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">for</span> <span class="n">L</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">Nc2</span><span class="p">):</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mf">0.25</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">L</span> <span class="o">-</span> <span class="n">j</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 : 0 1
1 : 0 2
2 : 1 2
3 : 0 3
4 : 1 3
5 : 2 3
6 : 0 4
7 : 1 4
8 : 2 4
9 : 3 4
</code></pre></div></div> <p>So to generate the combinations in the same order as the initial \(i\), \(j\) loops, we need to modify the code as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">Nc2</span> <span class="o">=</span> <span class="mi">10</span>
<span class="k">for</span> <span class="n">L</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">Nc2</span><span class="p">)):</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="mf">0.25</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">L</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">L</span> <span class="o">-</span> <span class="n">j</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">j</span><span class="p">,</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>9 : 0 1
8 : 0 2
7 : 0 3
6 : 0 4
5 : 1 2
4 : 1 3
3 : 1 4
2 : 2 3
1 : 2 4
0 : 3 4
</code></pre></div></div> <p>Or alternatively, if we want to modify the original \(i\), \(j\) loop to match the \(\lambda\) loop and the mathematical derivation:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 : 0 1
2 : 0 2
3 : 1 2
4 : 0 3
5 : 1 3
6 : 2 3
7 : 0 4
8 : 1 4
9 : 2 4
10 : 3 4
</code></pre></div></div> <h1 id="graphical-representation">Graphical representation</h1> <script type="text/tikz">
\begin{tikzpicture}

% GRAY
\foreach \i in {0,1,2,3,4}
  \foreach \j in {0,1,2,3}
    \node at (\i, \j) [draw, lightgray, circle]{};

% RED
\foreach \j [evaluate=\j as \jj using int(\j-1)] in {1,2,3}
  \foreach \i in {\jj,...,0}
    \node at (\j, \i) [fill, blue, circle]{};
\foreach \i in {0,1} \node at (4,\i) [fill, red, circle]{};

% labels
\node at (-1,-1) [anchor=east]{$\lambda=\frac{j(j-1)}{2}+i=6+1$};
\node at (-1,1) [draw]{$i=1$};
\node at (4,-1) [draw]{$j=4$};
\foreach \i in {0,2,3} \node at (-1,\i) {$\i$};
\foreach \j in {0,1,...,3} \node at (\j,-1) {$\j$};

\end{tikzpicture}
</script> <p>Because \(\lambda \mapsto j(\lambda) = \lfloor \sqrt{1/4 + 2 \lambda} + 1/2 \rfloor\) is monotonically increasing (non-decreasing), returning the \(\lfloor \cdot \rfloor\) which we skipped in the calculations above, means that \(j\) is the largest possible integer such that \(\lambda = i + \frac{j(j - 1)}{2}\) for a non-negative integer \(i\). In the figure we can read \(j=4\) since the blue dots represent \(\sum_{t=1}^{j-1} t\) and the red dots show the calculation of \(i = \lambda - \sum_{t=1}^{j-1} t\).</p>]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[In (Dash et al., 2021; Al Hajri et al., 2020), when iterating through all 2-hit combinations (of \(G\) number of genes), the outer two \(i\) and \(j\) loops are “flattened” into a single \(\lambda\) loop (\(\lambda \gets 1\ldots\binom{G}{2}\)). To reconstruct the \(i\) and \(j\) the following formulas are used:]]></summary></entry><entry><title type="html">Continuous benchmarking on supercomputers</title><link href="https://vatai.github.io/blog/2022/continuous-benchmarking-on-supercomputers/" rel="alternate" type="text/html" title="Continuous benchmarking on supercomputers"/><published>2022-05-18T11:12:00+00:00</published><updated>2022-05-18T11:12:00+00:00</updated><id>https://vatai.github.io/blog/2022/continuous-benchmarking-on-supercomputers</id><content type="html" xml:base="https://vatai.github.io/blog/2022/continuous-benchmarking-on-supercomputers/"><![CDATA[<p>A paper <a href="https://doi.org/10.1145/3324989.3325719">Towards Continuous Benchmarking: An Automated Performance Evaluation Framework for High Performance Software</a> by Anzt, H. et al. describes the posibilities of <em>continuous benchmarking</em> (CB), however it doesn’t give direct instructions how to implement it. Looking at the source code is always a possibility, but the <code class="language-plaintext highlighter-rouge">yaml</code> files there aren’t really documented (which is no surprises since they are pretty self documenting). Still, I hope this post will help people who unfamiliar with <em>Continuous X</em> approaches (where X can be integration, development, benchmarking etc).</p> <h1 id="overview">Overview</h1> <p>We will need 3 things:</p> <ul> <li>The <strong>app/benchmark</strong> itself, which we will assume to be given.</li> <li>We need to set up a <strong>“self-hosted runner”</strong>, the program running on the supercomputer, which will be executing the actions such as compiling the app and submitting job to the scheduler of the supercomputer.</li> <li>The <strong>yaml file</strong> which describes when and what should be executed by the “runner”.</li> </ul> <p>I’ll be describing the scenario for GitHub. Other sites like GitLab have similar systems.</p> <h2 id="self-hosted-runner">Self-hosted runner</h2> <p>In the Github repo <strong>settings</strong>, on the left-hand side, under <strong>Actions</strong> there is a <strong>Runners</strong> page. In the top-right corner there is a green <strong>New self-hosted runner</strong> button. Clicking on this button brings up a page where you can select the OS and architecture. For supercomputers Linux, x64 is a good choice since usually that is something that will run on the login node.</p> <p>Below the OS and architecture choice, the page lists the commands needed to install the self-hosted runner. This consists of several sections.</p> <p>The first section described how to download, validate and extract the runner software. <strong>Don’t use these instructions</strong>, use the ones from the GitHub settings page.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create a folder
$ mkdir actions-runner &amp;&amp; cd actions-runner
# Download the latest runner package
$ curl -o actions-runner-linux-x64-2.291.1.tar.gz -L https://github.com/actions/runner/releases/download/v2.291.1/actions-runner-linux-x64-2.291.1.tar.gz
# Optional: Validate the hash
$ echo "1bde3f2baf514adda5f8cf2ce531edd2f6be52ed84b9b6733bf43006d36dcd4c  actions-runner-linux-x64-2.291.1.tar.gz" | shasum -a 256 -c
# Extract the installer
$ tar xzf ./actions-runner-linux-x64-2.291.1.tar.gz
</code></pre></div></div> <p>The second section describes how to configure and run the self-hosted runner. Again <strong>don’t use these instructions</strong>, use the ones provided on the settings page, since the <code class="language-plaintext highlighter-rouge">--url</code> and the <code class="language-plaintext highlighter-rouge">--token</code> are dependent on the repo you want to add the runner to. The <code class="language-plaintext highlighter-rouge">./config.sh</code> asks a few questions, but generally it is very simple and usually the default answers are acceptable. The last command <code class="language-plaintext highlighter-rouge">./run.sh</code> is the runner itself, it connects to GitHub, and needs to be running to be able to accept workflows/jobs. See <a href="#security">note</a> about security.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create the runner and start the configuration experience
$ ./config.sh --url https://github.com/&lt;user&gt;/&lt;repo&gt; --token &lt;token&gt;
# Last step, run it!
$ ./run.sh
</code></pre></div></div> <p>The third section describes how to enable the runner in the Yaml file which is described in the next section.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Use this YAML in your workflow file for each job
runs-on: self-hosted
</code></pre></div></div> <p>This is the procedure to add a self-hosted runner to a repo. To the best of my knowledge, self-hosted runners can be added to GitHub users or GitHub organisations.</p> <h2 id="yaml-workflow-file">Yaml workflow file</h2> <p>To automatically run commands, we need to create a <code class="language-plaintext highlighter-rouge">&lt;name&gt;.yml</code> file in the <code class="language-plaintext highlighter-rouge">&lt;repo&gt;/.github/workflows/</code> directory, for example with the following contents:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .github/workflows/build-and-submit.yml
name: Build and submit
on: push
jobs:
  build:
    name: Build
    runs-on: [self-hosted,login-node]
    steps:
    - uses: actions/checkout@master
    - name: Create build dir
      run: mkdir build
    - name: Run cmake
      working-directory: ./build
      run: CXX=FCCpx cmake ..
    - name: Build
      run: cmake --build build --clean-first
    - name: Submit
      run: pjsub -g $(stat . -c %G) sub.sh
</code></pre></div></div> <p>Each <code class="language-plaintext highlighter-rouge">&lt;name&gt;.yml</code> file (which can have any name) describes a workflow, with its <code class="language-plaintext highlighter-rouge">name:</code> (which can be any string), and the event when it will be executed. The example above will be exectuted <code class="language-plaintext highlighter-rouge">on: push</code>.</p> <p>Each workflow consists of one or more <code class="language-plaintext highlighter-rouge">jobs:</code>. Multiple jobs are, by default, executed in parallel. In the example, for simplicity, there is only one job, with the custom identifier <code class="language-plaintext highlighter-rouge">build:</code> (this can be a different identifier e.g. <code class="language-plaintext highlighter-rouge">job1:</code>). Each job has a <code class="language-plaintext highlighter-rouge">name:</code> (similarly to a workflow), and each job needs to specify where it is should run using the <code class="language-plaintext highlighter-rouge">runs-on:</code> value. Without self-hosted runners, we can specify here a docker image (something like <code class="language-plaintext highlighter-rouge">ubuntu-20.04</code>), but in our case <code class="language-plaintext highlighter-rouge">[self-hosted,login-node]</code> specifies that the job should be executed on a <code class="language-plaintext highlighter-rouge">self-hosted</code> runner. The <code class="language-plaintext highlighter-rouge">login-node</code> is custom label which can be added to the runner on GitHub.</p> <p>The main part of a job is the <code class="language-plaintext highlighter-rouge">steps:</code> field, which describes a list of steps which are executed sequentially. The job in the example has 5 steps. The first step is an “external” step (like importing a library), which checks out the master branch of the repository. The second, third and fourth steps create a <code class="language-plaintext highlighter-rouge">build</code> directory, call <code class="language-plaintext highlighter-rouge">cmake</code> in that directory (using the <code class="language-plaintext highlighter-rouge">working-directory:</code>), and builds the app using <code class="language-plaintext highlighter-rouge">cmake --build</code>. Finally, the last step, calls the command of the supercomputer scheduler to submit the <code class="language-plaintext highlighter-rouge">sub.sh</code> script.</p> <h1 id="observing-the-actions">Observing the actions</h1> <p>The top bar of a GitHub repository has an “Actions” page.</p> <p><img src="/assets/images/actions.png" alt="Actions button" title="Actions button"/></p> <p>This page lists the workflows which were executed for the given repository. Clicking on a workflow, brings up a list of jobs defined for that workflow, and clicking on a job brings up the steps of that job. Clicking on a step expands it and displays the</p> <p><img src="/assets/images/observing.png" alt="Observing actions" title="Observing actions"/></p> <h1 id="security">Security</h1> <p>This is obviously a security issue. The runner script <code class="language-plaintext highlighter-rouge">./run.sh</code> should be running all the time, connected to GitHub.com, waiting for jobs. As stated on GitHub, this should be enabled only for <strong>private</strong> repositories.</p> <h1 id="future-work">Future work</h1> <p>Next, I’d like to figure out how to write a workflow or a job which monitors when the submitted script finishes.</p>]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[A paper Towards Continuous Benchmarking: An Automated Performance Evaluation Framework for High Performance Software by Anzt, H. et al. describes the posibilities of continuous benchmarking (CB), however it doesn’t give direct instructions how to implement it. Looking at the source code is always a possibility, but the yaml files there aren’t really documented (which is no surprises since they are pretty self documenting). Still, I hope this post will help people who unfamiliar with Continuous X approaches (where X can be integration, development, benchmarking etc).]]></summary></entry><entry><title type="html">Polyhedral compilation: part 1</title><link href="https://vatai.github.io/blog/2022/polyhedral-compilation-part-1/" rel="alternate" type="text/html" title="Polyhedral compilation: part 1"/><published>2022-01-29T00:00:00+00:00</published><updated>2022-01-29T00:00:00+00:00</updated><id>https://vatai.github.io/blog/2022/polyhedral-compilation-part-1</id><content type="html" xml:base="https://vatai.github.io/blog/2022/polyhedral-compilation-part-1/"><![CDATA[<h1 id="abstract">Abstract</h1> <p>This blog posts is the first in a series of posts about <strong>polyhedral compilation</strong>, a mathematical model used to describe and reason about certain types of loops, with the aim to generate faster code.</p> <p>This post revisits <a href="https://link.springer.com/article/10.1007/BF01407835">“Some efficient solutions to the affine scheduling problem. I. One-dimensional time” by Paul Feautrier</a>, the seminal paper of the field, which describes how to <em>formulate the the search for an optimal schedule as an integer linear programming (ILP) problem</em>.</p> <h1 id="overview-of-the-process">Overview of the process</h1> <p>Formulated as a source-to-source compilation, the following steps give a (<em>very simplified</em>) overview of the entire process:</p> <ul> <li><strong>The input</strong> is source code with “nice” loops (where “nice” means that the loops satisfy such properties, that they are simple enough to be handled by ILPs).</li> <li>Problem/step 1: Finding the “nice” loops in the source code. This is handled by <a href="https://repo.or.cz/w/pet.git">Polyhedral Extraction Tool (PET)</a> which extracts affine description of the source code into <a href="https://repo.or.cz/w/isl.git">ISL</a> objects (named integer tuple sets/relations etc.). The loops in the source code can be marked with <code class="language-plaintext highlighter-rouge">scop</code> and <code class="language-plaintext highlighter-rouge">endscop</code> <code class="language-plaintext highlighter-rouge">#pragma</code>s or PET also has an auto-detect feature.</li> <li>Problem/step 2: Find or approximate the dependencies in the code.</li> <li><strong>Problem/step 3</strong>: Formulate an ILP, which describes the statements from in step 1 and the dependencies from step 2. Given an optimisation objective, the ILP can be solved to find an <strong>(optimal) schedule</strong>.</li> <li>Problem/step 4: Based on the schedule obtained in the previous step <strong>generate</strong> (improved) source code</li> <li><strong>The output</strong> is a source code with optimised loops.</li> </ul> <p>This post only addresses (the first half) of <strong>Problem/step 3</strong>.</p> <h1 id="example-code-matrix-vector-product">Example code: matrix vector product</h1> <pre><code class="language-C">for (i = 0; i &lt;= n; i++) {
S1: a[i] = 0.0;
    for (j = 0; j &lt;= n; j++)
S2:   a[i] += b[j] * M[i][j];
}
</code></pre> <p>The above code has two relevant <strong>statements</strong> which access the memory: <code class="language-plaintext highlighter-rouge">a[i] = 0.0;</code> labelled as \(S_1\) and <code class="language-plaintext highlighter-rouge">a[i] += b[j] * M[i][j];</code> labelled as \(S_2\). Each of the two statements is executed multiple times, it has multiple <strong>instances</strong>, for example the instances of statement \(S_1\) are:</p> <ul> <li><code class="language-plaintext highlighter-rouge">a[0] = 0.0;</code> for \(i = 0\),</li> <li><code class="language-plaintext highlighter-rouge">a[1] = 0.0;</code> for \(i = 1\) etc.</li> </ul> <p>Since instances may need to be described by multiple loop variables, we adopt the notation \(\vec{i}\) for <strong>vectors in the iteration space</strong>, vectors with integer entries, such that the first element corresponds to the outermost and the last to the innermost loop variable. For example</p> <ul> <li><code class="language-plaintext highlighter-rouge">a[0] += b[1] * M[0][1];</code> for \(\vec{i} = (i, j) = (0, 1)\) and</li> <li><code class="language-plaintext highlighter-rouge">a[2] += b[3] * M[2][3];</code> for \(\vec{i} = (i, j) = (2, 3)\).</li> </ul> <h1 id="describing-dependencies">Describing dependencies</h1> <h2 id="generalised-dependency-graph-gdg">Generalised Dependency Graph (GDG)</h2> <h3 id="verticesdomains">Vertices/domains</h3> <p>For each statement \(S\) the corresponding <strong>vertex</strong> of the GDG is labelled with the <strong>domain</strong> (hence the \(\mathscr{D}\) notation below) of the statement \(S\), i.e. the subset of the iteration space containing the instances of \(S\) executed by the loop.</p> <ul> <li>\(\mathscr{D}_1 = \\{ i : 0 \le i \le n \\}\) for statement \(S_1\)</li> <li>\(\mathscr{D}_2 = \\{ (i, j) : 0 \le i, j \le n \\}\) for statement \(S_2\)</li> </ul> <p>Technically, the domains are not sets, but families of sets, depending on parameters (in this example on the single parameter \(n\)), so the domain for statement 1 is the map \(n \mapsto \\{ i : 0 \le i \le n \\}\), but we omit the “\(n \mapsto\)” part, and treat \(n\) as a constant (but this will be included in a more).</p> <h3 id="edgesdependencies">Edges/dependencies</h3> <p>The <strong>edges</strong> of GDG are the <strong>dependencies</strong> between two statements and are labelled with a subset of the direct product (a relation, hence the \(\mathscr{R}\) notation below) between the two domains of statements of the start and end of the edge, that is, if \(S'\) and \(S\) are two statements and there is a dependency between the instances \(\vec{i'} \in \mathscr{D}_ {S'}\) and \(\vec{i} \in \mathscr{D}_ S\) then there is and edge from vertex \(\mathscr{D}_{S'}\) to \(\mathscr{D} _S\) labelled with a set that contains \((\vec{i'}, \vec{i})\).</p> <p>A simplified (ergo very conservative) dependency analysis (there are programs which can perform such analysis) could yield two dependencies:</p> <ul> <li>\(\mathscr{R}_{1, 2} = \{ \bigl( i', (i, j) \bigr) : i' = i \}\) describes the dependency between \(S_1\) and \(S_2\) which requires for the initialisation in \(S_1\) (<code class="language-plaintext highlighter-rouge">a[i] = 0.0</code>) to precede (all instances of) statement \(S_2\) when the two statements share the same value for the loop variable \(i\) (hence \(i' = i\)).</li> <li>\(\mathscr{R}_{2, 2} = \{ \bigl( (i', j'), (i, j) : i' = i \land j' &lt; j \}\) describes the dependency of \(S_2\) on itself, which requires, for a given \(i\) (\(i' = i\)) the earlier instances of (in \(j\)) are executed before the later instances (hence \(j' &lt; j\)).</li> </ul> <p>This dependency analysis is <strong>very</strong> coarse and/or conservative (read poor), we’ll discuss a simple data flow dependency later (which is still quite simple, but a slight improvement over the one above).</p> <h2 id="detailed-dependency-graph-ddg">Detailed Dependency Graph (DDG)</h2> <p>The GDG is structured: the vertices in GDG are statements, and these statements represent multiple instances, but we actually care about the dependencies between the instances. For this reason the Detailed Dependency Graph “flattens” the graph, and every vertex is an instance of a statement, and the edges are the dependencies between these instances.</p> <h3 id="vertices">Vertices</h3> \[\Omega = \bigcup _{S \in V} \{ (S, \vec{i}) : \vec{i} \in \mathscr{D} _S \}\] <h3 id="edges">Edges</h3> \[\Gamma = \bigcup _{e \in E} \bigl\{ \bigl( (\sigma(e), \vec{i'}), (\delta(e), \vec{i}) \bigr) : \vec{i'} \in \mathscr{D} _{\sigma(e)}, \vec{i} \in \mathscr{D} _{\delta(e)}, (\vec{i'}, \vec{i}) \in \mathscr{R}_e \bigr\}\] <p>where the statement \(\sigma(e)\) is the start, statement \(\delta(e)\) is the end of edge \(e\) (of the GDG).</p> <h1 id="schedule">Schedule</h1> <p>The schedule is a map \(\theta: \Omega \to \mathbb{R}_0^+\) from the set of instances to some non-negative value which is the “date” (or timestamp, or time) of the instance.</p> <h2 id="generating-code">Generating code</h2> <p>As mentioned above, generating code is a separate, and very much non-trivial problem. But to get a better feeling how to interpret the schedule \(\theta\) a simplified code generations is presented:</p> <p>Let \(\mathtt{F}(t) = \\{ (S, \vec{i}) \in \Omega: \theta(S, \vec{i}) = t \\}\), i.e. the set of all instances of all statements which should be executed at time step \(t\). Let \(\mathtt{L} = \max_{(S, \vec{i}) \in \Omega} \theta(S, \vec{i})\).</p> <pre><code class="language-C++">for (t = 0; t &lt;= L; t++) {
  #pragma omp parallel
  for (inst : F(t))
    execute(inst);
  barrier();
}
</code></pre> <p>Of course, actual code generation is a much harder task than this naive pseudo-code, but it can be handled separately, the objective of this now is how to obtain the optimal schedule.</p> <h2 id="there-is-no-optimal-schedule">There is (no) optimal schedule</h2> <p>The paper cites Theorems which say that finding a schedule <strong>of arbitrary form</strong> is an undecidable problem. Because of this, we restrict ourselves to <strong>affine schedules</strong>, that is schedules of the form: \(\theta(S, \vec{i}) = \tau_S \vec{i} + \sigma_s \vec{n} + \alpha_s\) for each statement \(S\). The vector \(\vec{n}\) is the vector of parameters, for the example above the vector of length 1 containing \(n\). In this case the triplet \((\tau_S, \sigma_S, \alpha_S)\) completely define \(\theta\) (for a given \(S\)), so the goal is finding a \((\tau_S, \sigma_S, \alpha_S)\) triplet for each statement \(S\).</p> <h1 id="more-advanced-dependency-analysis">More advanced dependency analysis</h1> <h2 id="depth">Depth</h2> <p>Descriptions such as GDG and DDG can enable some optimisations.</p> <p>The <strong>depth</strong> of an edge is the position until which both instances at the start and the end of the edge share values, and after which the end instance has a larger value, that is \(p_ e\) is the depth of edge \(e\) iff \((\vec{i'}, \vec{i}) \in \mathscr{R} _ e\) and \(i'_ k = i_ k\) for \(1 \le k \le p_ e\) and \(i'_ {p_ e} &lt; i_ {p_ e}\) where \(\vec{i'} = (i'_ 1, i'_ 2, \ldots)\) and \(\vec{i} = (i_ 1, i_2, \ldots)\).</p> <p>In the example, both edges of the GDG have depth 1:</p> <ul> <li>\(\mathscr{R}_{1, 2} = \{ \bigl( i', (i, j) \bigr) : i' = i \}\),</li> <li>\(\mathscr{R}_{2, 2} = \{ \bigl( (i', j'), (i, j) : i' = i \land j' &lt; j \}\).</li> </ul> <p>In both cases the \(i'=i\) part implies depth \(p_e \ge 1\) and the rest ensures \(p _e \le 1\).</p> <p>This can be used to infer, that we are allowed to execute the outermost loop in parallel.</p> <h2 id="dependence-direction-vectors">Dependence direction vectors</h2> <p>A more detailed description of the dependencies can be given using symbols such as \(&lt;, \le, =, *, \ldots\) combined in a <strong>dependence direction vector</strong> (the asterisk denotes a wildcard, meaning any relation). Depth can be expressed with DDVs as</p> \[(\overbrace{=, \ldots, =}^{p_e}, &lt;, *, \ldots)\] <h2 id="uniform-dependence">Uniform dependence</h2> <p>The case where there is a constant difference between the instances of both ends of an edge, that is when \(i' = i + d\) if \((i', i) \in \mathscr{R}_ e\), the edge \(e\) is said to have a <strong>uniform dependence</strong>. In this case, instead of keeping track of \(\mathscr{D}_ {\sigma(e)}\), \(\mathscr{D}_ {\delta(e)}\) and the set of \((\vec{i'}, \vec{i})\) pairs, we can just keep track of a single set (polyhedron) of instances \(\mathscr{P}_ e\) and a affine map \(h_ e\) such that \(y \in \mathscr{P}_ e \implies y \in \mathscr{D}_ {\delta(e)} \land h_e(y) \in \mathscr{D} _{\sigma(e)}\) and then</p> \[(\vec{i'}, \vec{i}) \in \mathscr{R}_ e \iff \vec{i'} = h_ e(\vec{i}) \land \vec{i} \in \mathscr{P}_e\] <p>A more detailed analysis shows that the second edge of our example has such a uniform dependency.</p> <h2 id="dataflow-analysis">Dataflow analysis</h2> <p>A little more advanced (but still very much conservative) dataflow analysis can further restrict the polyhedrons \(\mathscr{R} _{1, 2}\) and \(\mathscr{R} _{2, 2}\). The analysis of the memory reads and writes tells us that only the entries of <code class="language-plaintext highlighter-rouge">a[i]</code> updated, they are updated independently for each index \(i\), and making no assumptions about the <code class="language-plaintext highlighter-rouge">+</code> operation (such as associativity, which <em>could</em> be used for further optimisations), we observe that</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">a[i]</code> is initialised in statement \(S_ 1\) and only the first iteration of the \(j\) loop depends on it: \(\bigl(i', (i, j) \bigr) \in \mathscr{R}_ {1,2} \iff i' = i \land j = 0\) (I think there is a typo in the paper saying \(j = 1\)?). This is reduced as:</p> \[\mathscr{P}_ {e _1} = \mathscr{D}_2 \cap \{ (i, j) : j \le 0 \}, \quad h _{e _1}(i, j) = i\] </li> <li> <p><code class="language-plaintext highlighter-rouge">a[i]</code> is updated with each iteration of \(j\), so every iteration (instance) of \(j\) depends only on the previous iteration (\(j - 1\)), and this only applies starting from the second iteration (\(j \ge 1\)): \(\bigl( (i', j'), (i, j) \bigr) \in \mathscr{R} _{2,2} \iff i' = i \land j' = j - 1 \land j \ge 1\) (Again, this might be a typo \(j \ge 2\) in the paper?) This is reduced as:</p> \[\mathscr{P} _{e _2} = \mathscr{D} _2 \cap \{ (i, j) : j \ge 1 \}, \quad h _{e _2}(i, j) = (i, j - 1)\] </li> </ul> <p>We will continue with these reduced forms.</p> <h1 id="formulating-the-integer-linear-program">Formulating the integer linear program</h1> <h2 id="describing-verticesdomains">Describing vertices/domains</h2> <p>The \(\mathscr{D}_ S\) domains (including the parameters, represented as \(\vec{n}\)) need to be rewritten in the form where given the parameters \(\vec{n}\) the instance \(\vec{i}\) is in domaind \(\mathscr{D} _S\) iff:</p> \[a_{S_k} \begin{pmatrix} \vec{i} \\ \vec{n} \end{pmatrix} + b_{S_k} \ge 0 \quad (\forall k=1, \ldots m_S)\] <p>This way, the \((a_ {S_ k}, b_ {S_ k})\) pairs completely describe \(\mathscr{D} _S\) (that is, you can use these vectors to represent them in a computer program).</p> \[\begin{align} \mathscr{D}_1 &amp;= \{ i : 0 \le i \le n \} \\&amp;= \{ i : 0 \le i \land 0 \le n - i \} \\ \mathscr{D}_2 &amp;= \{ (i, j) : 0 \le i, j \le n \} \\ &amp;= \{ (i, j) : 0 \le i \land 0 \le n - i \land 0 \le j \land 0 \le n - j \} \end{align}\] <p>In the example of \(\mathscr{D} _1\) there are two inequalities, implying \(m _1 = 2\):</p> \[0 \le i = (1, 0) \begin{pmatrix} i \\ n \end{pmatrix} + 0\] <p>implies \(a _{S _1} = (1, 0)\) and \(b _{S _1} = 0\) and</p> \[0 \le n - i = (-1, 1) \begin{pmatrix} i \\ n \end{pmatrix} + 0\] <p>implies \(a _{S _2} = (-1, 1)\) and \(b _{S _2} = 0\).</p> <p>Domain \(\mathscr{D} _2\) can be described with \(m _2 = 4\) such equations.</p> <h2 id="describing-edgesdependencies">Describing edges/dependencies</h2> <p>The edges \(\mathscr{R}_ e\) of the GDG is described by \((c_e, d_e)\) such that:</p> \[c _{e _k} \begin{pmatrix} \vec{i'} \\ \vec{i} \\ \vec{n} \end{pmatrix} + d_ {e_k} \ge 0 \quad (\forall k=1, \ldots m _e)\] <p>or for a restricted schedule with the affine map \(\vec{i'} = h_e(\vec{i})\) and the rewritten reduced domain \(\mathscr{P} _e\):</p> \[c_{e_k} \begin{pmatrix} \vec{i} \\ \vec{n} \end{pmatrix} + d_{e_k} \ge 0 \quad (\forall k=1, \ldots m_S)\] <p>The reduced domains \(\mathscr{P} _{e _1}\) and \(\mathscr{P} _{ e _2}\) can be described similarly as the other domains \(\mathscr{D} _1\) and \(\mathscr{D} _2\).</p> <h2 id="describing-schedules">Describing schedules</h2> <p>The schedule \(\theta(S, \vec{i})\) is also going to be rewritten using a set of \(\mu\) Farkas multipliers. For each statement \(S\) we assume that the schedule can be expressed as:</p> \[\theta(S, \vec{i}) \equiv \mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \Bigl( a_{S_k} \begin{pmatrix} \vec{i} \\ n \end{pmatrix} + b_{S_k} \Bigr)\] <p>This captures the information provided by the domains \(\mathscr{D} _S\) captured in the (\(m _S\) number of) \((a _{S _k}, b _{S _k})\) pairs. To combine this with the information from the dependencies/edges we will need the <em>delay</em> corresponding to the edges.</p> <h2 id="the-delay">The delay</h2> <p>We assume that if the instance \(\vec{i}\) of a statement \(S\) depends on the instance \(\vec{i'}\) of the statement \(S'\), then there is a <strong>delay</strong> \(\Delta\) associated with that dependency/edge \(e\). This means that the date of \(S, \vec{i}\) assigned by the schedule \(\theta\) is greater (by at least \(1\)) than the date of \(S', \vec{i'}\):</p> \[\Delta = \theta(S, \vec{i}) - \theta(S', \vec{i'}) - 1 \ge 0\] <p>We assume that this delay can be rewritten with a different set of \(\lambda\) Farkas multipliers (these will be just placeholders to express dependencies between inequalities across inequalities resulting from the dependencies/edges).</p> \[\Delta \equiv \lambda_{e_0} + \sum_{k=1}^{m_e} \lambda_{e_k} \Bigl( c_{e_k} \begin{pmatrix} \vec{i} \\ n \end{pmatrix} + d_{e_k} \Bigr)\] <h1 id="putting-it-all-together">Putting it all together</h1> <p>The \(\equiv\) in the last equation was alluding to the next step where we combine the “\(\theta\) equations” expressing the domains and the “\(\Delta\) equations” expressing the dependencies.</p> \[\theta(S, \vec{i}) - \theta(S', \vec{i'}) - 1 \equiv \Delta \ge 0\] <p>On the left side of \(\equiv\) in the expression above we use two instances of the “\(\theta\) equations” (with \(a _S{ _k}\), \(b _S{ _k}\) and \(\mu _S{ _k}\)), on the right “\(\Delta\) equations” (with \(c _{e _k}\), \(d _{e _k}\) and \(\lambda _{e _k}\)) and solve the ILP for the \(\mu _{S _k}\) variables (for each statement \(S\)).</p> <h2 id="edge-e_1--1-to-2">Edge \(e_1 : 1 \to 2\)</h2> <p>For the first edge \(e _1\) between statement \(S_1\) to \(S_2\) the equations from above give rise to the following</p> \[\begin{align*} &amp;\bigl[\mu_{2, 0} + \mu_{2, 1} i + \mu_{2, 2} (n - i) + \mu_{2, 3} j + \mu_{2, 4} (n - j) \bigr] \\ -&amp; \bigl[\mu_{1, 0} + \mu_{1, 1} i + \mu_{1, 2} (n - i) \bigr] - 1 \\ \equiv&amp; \lambda_{1, 0} + \lambda_{1, 1} i + \lambda_{1, 2} (n - i) + \lambda_{1, 3} j + \lambda_{1, 4} (n - j) - \lambda_{1, 5} j \ge 0 \end{align*}\] <p>The first and second line (except the \(-1\) at the end of it) of the ILP come from the rewritten form of \(\mathscr{D}_2\) and \(\mathscr{D}_1\) from the <a href="#describing-verticesdomains">Describing vertices/domains</a> section, plugged in the “\(\Theta\) equation”, while the third line is the result of taking \(\mathscr{P} _{e _1}\) <a href="#dataflow-analysis">Dataflow analysis</a>, which is \(-j \ge 0\) and the inequalities from the \(\mathscr{D} _2\) (hence the similarity to the first line).</p> <p>The previous equation is equivalent to the following system of equations by equating the coefficients of \(i\), \(j\), \(n\) and the constant term.</p> \[\begin{align} \mu_{2, 0} - \mu_{1, 0} - 1 &amp;= \lambda_{1, 0} &amp;\text{const. terms}\\ \mu_{2, 1} - \mu_{2, 2} - \mu_{1, 1} + \mu_{1, 2} &amp;= \lambda_{1, 1} - \lambda_{1, 2} &amp;\text{$i$ terms}\\ \mu_{2, 3} - \mu_{2, 4} &amp;= \lambda_{1, 3} - \lambda_{1, 4} - \lambda_{1, 5} &amp;\text{$j$ terms}\\ \mu_{2, 2} + \mu_{2, 4} - \mu_{1, 2} &amp;= \lambda_{1, 2} + \lambda_{1, 4} &amp;\text{$n$ terms} \end{align}\] <h2 id="edge-e_2--2-to-2">Edge \(e_2 : 2 \to 2\)</h2> <p>The second edge is a <a href="#uniform-dependence">uniform dependency</a>, the schedule for the start and end of the edge, \(\theta(S _2, h(\vec{i}))\) and \(\theta(S _2, \vec{i})\) is nearly identical (difference highlighted in the formulae below).</p> \[\mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} (\begin{smallmatrix} {\color{magenta}{\vec{i}}} \\ n \end{smallmatrix}) + b_{S_k} \bigr) - \bigl[ \mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} (\begin{smallmatrix} \color{magenta}{h(\vec{i})} \\ n \end{smallmatrix}) + b_{S_k} \bigr) \bigr]\] <p>This results to most of the terms cancelling each other out in the expression \(\theta(S _2, \vec{i}) - \theta(S _1, h(\vec{i}))\) (written with the \(\mu _{S _k}\) Farkas multipliers):</p> \[\mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} \Bigl(\begin{smallmatrix} i \\ j \\ n \end{smallmatrix}\Bigr) + b_{S_k} \bigr) - \bigl[ \mu_{S_0} + \sum_{k=1}^{m_S} \mu_{S_k} \bigl( a_{S_k} \Bigl(\begin{smallmatrix} i \\ j \color{magenta}{-1} \\ n \end{smallmatrix}\Bigr) + b_{S_k} \bigr) \bigr]\] <p>As a result, the loop edge on \(S _2\) results in the following equation (not the lack of \(\lambda _{S _k}\) multipliers).</p> \[\Delta = \theta(S _2, i, j) - \theta(S _2, i, j - 1) - 1 = \mu_{2, 3} - \mu_{2, 4} - 1 \ge 0\] <h2 id="the-calculations">The calculations</h2> <p>Collecting and rearranging the inequalities for \(e _1 : S _1 \to S _2\) and \(e _2 : S _2 \to S _2\).</p> \[\begin{align} \lambda_{1, 0} =&amp; \mu_{2, 0} - \mu_{1, 0} - 1 \ge 0 \\ \lambda_{1, 1} =&amp; \mu_{2, 1} + \mu_{2, 4} - \mu_{1, 1} - \lambda_{1, 4} \ge 0 \\ \lambda_{1, 3} =&amp; \mu_{2, 3} - \mu_{2, 4} - \lambda_{1, 4} - \lambda_{1, 5} \ge 0 \\ \lambda_{1, 2} =&amp; \mu_{2, 2} + \mu_{2, 4} - \mu_{1, 2} - \lambda_{1, 4} \ge 0 \\ &amp; \mu_{2, 3} - \mu_{2, 4} - 1 \ge 0 \end{align}\] <p>Simplifying it gives:</p> \[\begin{align*} \mu_{2, 0} - \mu_{1, 0} - 1 \ge&amp; 0 \\ \mu_{2, 3} - \mu_{2, 4} - 1 \ge&amp; 0 \\ \mu_{2, 3} + \mu_{2, 4} - \mu_{1, 1} \ge&amp; 0 \\ \mu_{2, 2} + \mu_{2, 4} - \mu_{1, 2} \ge&amp; 0 \end{align*}\] <p>All these manipulations can be performed by algorithms automatically.</p> <h2 id="one-possible-result">One possible result</h2> <p>One valid choice for the \(\mu _{S _k}\) values is:</p> <ul> <li> \[\mu_{1, 0} = \mu_{2, 1} = \mu_{2, 2} = \mu_{2, 4} = \mu_{1, 1} = \mu_{1, 2} = 0\] </li> <li> \[\mu_{2, 0} = \mu_{2, 3} = 1\] </li> <li> \[\theta(1, i) = 0\] </li> <li> \[\theta(2, i, j) = j + 1\] </li> </ul> <h2 id="generated-code">Generated code</h2> <p>The resulting schedule is:</p> <ul> <li> \[\theta(S _1, i) = 0\] </li> <li> \[\theta(S _2, i, j) = j + 1\] </li> </ul> <p>Generating code from this is a separate task and will be disucussed in the next blog post, but the paper suggests something similar to:</p> <pre><code class="language-C++">#pragma omp parallel
for (i = 0; i &lt;= n; n++)
  a[i] = 0.0;
for (j = 0; j &lt;= n; j++)
  #pragma omp parallel
  for (i = 0; i &lt;= n; i++)
    a[i] += b[j] * M[i][j];
</code></pre> <h1 id="citing-this-blog-post">Citing this blog post</h1> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@misc{vatai2022polytutor1,
  title={Polyhedral compilation: part 1},
  url={https://vatai.github.io/math/compsci/polyhedral/polyhedral-compilation-part-1/},
  author={Vatai, Emil},
  year={2022},
  month={Feb}
}
</code></pre></div></div> <h1 id="feedback">Feedback</h1> <p>Feedback is very much welcome. I don’t have a comment section set up, but you can raise an <a href="https://github.com/vatai/vatai.github.io/issues">issue</a> on GitHub.</p>]]></content><author><name></name></author><category term="math"/><category term="compsci"/><category term="polyhedral"/><summary type="html"><![CDATA[Abstract]]></summary></entry><entry><title type="html">Installing PyTorch with MPI support on ABCI</title><link href="https://vatai.github.io/blog/2021/Installing-PyTorch-with-MPI-support-on-ABCI/" rel="alternate" type="text/html" title="Installing PyTorch with MPI support on ABCI"/><published>2021-09-01T08:00:00+00:00</published><updated>2021-09-01T08:00:00+00:00</updated><id>https://vatai.github.io/blog/2021/Installing-PyTorch-with-MPI-support-on-ABCI</id><content type="html" xml:base="https://vatai.github.io/blog/2021/Installing-PyTorch-with-MPI-support-on-ABCI/"><![CDATA[<p>To get MPI backend for <a href="https://pytorch.org/docs/stable/distributed.html"><code class="language-plaintext highlighter-rouge">torch distributed</code></a> working you need to recompile PyTorch.</p> <p>On ABCI to get this working, you need to load these modules (some of them might be not needed, I just grabbed a <code class="language-plaintext highlighter-rouge">modules.sh</code> file):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module load gcc/9.3.0
module load cuda/11.2/11.2.2
module load cudnn/8.1/8.1.1
module load nccl/2.8/2.8.4-1
module load openmpi/4.0.5
module load python/3.8/3.8.7
module load cmake/3.19
</code></pre></div></div> <p>After this we just need to clone the PyTorch repo:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:pytorch/pytorch.git
</code></pre></div></div> <p>and build it:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 setup.py develop --user
</code></pre></div></div> <p>This <strong>overwrites</strong> your current PyTorch installation, and you need to use <code class="language-plaintext highlighter-rouge">--upgrade --forece-reinstall</code> with <code class="language-plaintext highlighter-rouge">pip3</code> to install the original one.</p>]]></content><author><name></name></author><category term="tutorial"/><category term="MPI"/><category term="ABCI"/><summary type="html"><![CDATA[To get MPI backend for torch distributed working you need to recompile PyTorch.]]></summary></entry><entry><title type="html">How to set up a website like this part 2</title><link href="https://vatai.github.io/blog/2020/Setting-up-this-website-part-2/" rel="alternate" type="text/html" title="How to set up a website like this part 2"/><published>2020-12-21T13:00:00+00:00</published><updated>2020-12-21T13:00:00+00:00</updated><id>https://vatai.github.io/blog/2020/Setting-up-this-website-part-2</id><content type="html" xml:base="https://vatai.github.io/blog/2020/Setting-up-this-website-part-2/"><![CDATA[<h2 id="tldr">TL;DR:</h2> <p>Some things I’ve already set up and promised to write about:</p> <ul> <li>MathJax</li> <li>Stylesheets</li> <li>Categories (now fully solved)</li> </ul> <h2 id="mathjax">MathJax</h2> <p>To set up MathJax for <a href="https://jekyllrb.com/">Jekyll</a>/<a href="https://mmistakes.github.io/minimal-mistakes/">Minimal-mistakes theme</a>, you need two things:</p> <ol> <li>Include/link MathJax to your website like you’d do in when working with “regular <code class="language-plaintext highlighter-rouge">html</code>” (and optionally configure MathJax markup such as <code class="language-plaintext highlighter-rouge">$</code> or <code class="language-plaintext highlighter-rouge">\(</code>, <code class="language-plaintext highlighter-rouge">\)</code>)</li> <li>Make sure that the markdown parser used by Jekyll knows about MathJax.</li> </ol> <h3 id="including-mathjax">Including MathJax</h3> <p>If we were working with simple <code class="language-plaintext highlighter-rouge">html</code>, the place to include this would be inside the <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>. To include something in the head, we just need to put it in <code class="language-plaintext highlighter-rouge">_includes/head/custom.html</code> - anything in this file will be inserted into the heading of all <code class="language-plaintext highlighter-rouge">html</code> files generated by Jekyll.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">async</span> <span class="na">src=</span><span class="s">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/x-mathjax-config"</span><span class="nt">&gt;</span>
  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nc">Config</span><span class="p">({</span>
    <span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">tex2jax.js</span><span class="dl">"</span><span class="p">],</span>
    <span class="na">jax</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">input/TeX</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">output/HTML-CSS</span><span class="dl">"</span><span class="p">],</span>
    <span class="na">tex2jax</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">inlineMath</span><span class="p">:</span> <span class="p">[</span> <span class="p">[</span><span class="dl">'</span><span class="s1">$</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">$</span><span class="dl">'</span><span class="p">],</span> <span class="p">[</span><span class="dl">"</span><span class="se">\\</span><span class="s2">(</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="se">\\</span><span class="s2">)</span><span class="dl">"</span><span class="p">]</span> <span class="p">],</span>
      <span class="na">displayMath</span><span class="p">:</span> <span class="p">[</span> <span class="p">[</span><span class="dl">'</span><span class="s1">$$</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">$$</span><span class="dl">'</span><span class="p">],</span> <span class="p">[</span><span class="dl">"</span><span class="se">\\</span><span class="s2">[</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="se">\\</span><span class="s2">]</span><span class="dl">"</span><span class="p">]</span> <span class="p">],</span>
      <span class="na">processEscapes</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="dl">"</span><span class="s2">HTML-CSS</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span> <span class="na">availableFonts</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">TeX</span><span class="dl">"</span><span class="p">]</span> <span class="p">}</span>
  <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <p>In addition, we can make it a configurable option, if we want to load MathJax on each of our pages using the Liquid template language, since <code class="language-plaintext highlighter-rouge">_includes/head/custom.html</code> also passes trough it (more one this below).</p> <h3 id="kramdown">kramdown</h3> <p><a href="https://kramdown.gettalong.org/">kramdown</a> is the default markdown parser for Jekyll, and it is also explicitly set in the Minimal-mistakes <code class="language-plaintext highlighter-rouge">_config.yml</code> like this:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">markdown</span><span class="pi">:</span> <span class="s">kramdown</span>
</code></pre></div></div> <p>Since we want to use MathJax in conjunction with markdown, kramdown has to be made aware of it, which can be achieved like this in <code class="language-plaintext highlighter-rouge">_config.yml</code>:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kramdown</span><span class="pi">:</span>
  <span class="na">math_engine</span><span class="pi">:</span> <span class="s">mathjax</span>
</code></pre></div></div> <h3 id="load-mathjax-for-certain-pages">Load MathJax for certain pages</h3> <p>To relieve the pressure on MathJax CDN servers, the MathJax loading code can be wrapped inside a Liquid <code class="language-plaintext highlighter-rouge">if</code> statement like this:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {% if page.usemathjax %}
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">async</span> <span class="na">src=</span><span class="s">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/x-mathjax-config"</span><span class="nt">&gt;</span>
  <span class="p">...</span>
<span class="nt">&lt;/script&gt;</span>
{% endif %} 
</code></pre></div></div> <p>This way, the MathJax loading code is generating only when the <code class="language-plaintext highlighter-rouge">usemathjax</code> variable is set for a page. You can set this variable in the front matter of each page like this:</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="nn">---</span>

<span class="gu">## usemathjax: true</span>
</code></pre></div></div> <h2 id="stylesheets">Stylesheets</h2> <p>Stylesheets are configured similar to how MathJax was added to <code class="language-plaintext highlighter-rouge">&lt;head&gt;</code>. In this case, the <code class="language-plaintext highlighter-rouge">/assets/css/main.scss</code> file needs to be created, based on the same file in the Minimal-mistakes repo. Nice explanation can be found in the Minimal-mistakes <a href="https://mmistakes.github.io/minimal-mistakes/docs/stylesheets/">docs</a>.</p> <h2 id="categories">Categories</h2> <p>You can write a <code class="language-plaintext highlighter-rouge">.md</code> file which iterates trough the categories using Liquid, or you can use a plugin like <code class="language-plaintext highlighter-rouge">[jekyll-archives](https://github.com/jekyll/jekyll-archives)</code> to generate these pages automatically. If you copied the <code class="language-plaintext highlighter-rouge">_config.yml</code> from Minimal-mistakes, most of the settings should be there (it might be commented, just search for <code class="language-plaintext highlighter-rouge">archive</code>).</p> <p>Don’t forget to create the following <code class="language-plaintext highlighter-rouge">category-archive.md</code> and <code class="language-plaintext highlighter-rouge">tag-archive.md</code>.</p> <p><code class="language-plaintext highlighter-rouge">/_pages/category-archive.md</code> with contents:</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Posts</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">Category"</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">categories</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/categories/</span>
<span class="na">author_profile</span><span class="pi">:</span> <span class="kc">true</span>
<span class="nn">---</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">/_pages/tag-archive.md</code> with contents:</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Posts</span><span class="nv"> </span><span class="s">by</span><span class="nv"> </span><span class="s">Tag"</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/tags/</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">tags</span>
<span class="na">author_profile</span><span class="pi">:</span> <span class="kc">true</span>
<span class="nn">---</span>
</code></pre></div></div> <p>This should create the <code class="language-plaintext highlighter-rouge">/categories</code> and <code class="language-plaintext highlighter-rouge">/tags</code> pages on your website.</p> <h2 id="masthead-ie-links-on-the-top">Masthead i.e. links on the top</h2> <p>The links (and the large icon) on top of the page, including the title (with the link that takes you to the root/home) is called the masthead. It can be filled by adding entries to <code class="language-plaintext highlighter-rouge">/_data/navigation.yml</code> such as this:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">main</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">About</span><span class="nv"> </span><span class="s">me"</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">/aboutme</span>
</code></pre></div></div> <p>More details in the Minimal-mistakes <a href="https://mmistakes.github.io/minimal-mistakes/docs/navigation/">docs</a>.</p>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[Old post about setting up Minimal Mistakes Jekyll theme (which I'm not using anymore)]]></summary></entry><entry><title type="html">How to set up a website like this</title><link href="https://vatai.github.io/blog/2020/Setting-up-this-website/" rel="alternate" type="text/html" title="How to set up a website like this"/><published>2020-12-06T12:32:00+00:00</published><updated>2020-12-06T12:32:00+00:00</updated><id>https://vatai.github.io/blog/2020/Setting-up-this-website</id><content type="html" xml:base="https://vatai.github.io/blog/2020/Setting-up-this-website/"><![CDATA[<h2 id="tldr">TL;DR:</h2> <p>Describe how to set up a website/statically generated microblog like this one, which is essentially</p> <ul> <li>a <a href="https://jekyllrb.com/">Jekyll website</a>,</li> <li>using the <a href="https://mmistakes.github.io/minimal-mistakes/">Minimal-mistakes theme</a>,</li> <li>hosted on <a href="https://pages.github.com/">GitHub pages</a>.</li> </ul> <h2 id="introduction">Introduction</h2> <p>Github pages (HTML only) with Jekyll is super simple to set up, but the themes and the basic built-in stuff is relatively limited and Minimal-mistakes is a good theme to add a bunch of extra stuff to your website/microblog/whatever you want to call it.</p> <h3 id="jekyll">Jekyll</h3> <p><strong>Jekyll</strong> is <em>like</em> a build system, which “put’s it all together” and generates the static <code class="language-plaintext highlighter-rouge">.html</code> pages, so <strong>Jekyll’s documentation is what you should most probably be reading</strong>.</p> <h3 id="liquid">Liquid</h3> <p><a href="https://shopify.github.io/liquid/">Liquid</a> is the template language, which ties the data from the Jekyll to the webpages. Liquid is applied independently to both <code class="language-plaintext highlighter-rouge">.md</code> and <code class="language-plaintext highlighter-rouge">.html</code> files. It is nicely explained in the <a href="https://jekyllrb.com/docs/rendering-process/">docs</a>.</p> <h3 id="configuration-file">Configuration file</h3> <p>Probably the most important thing about Jekyll is the <code class="language-plaintext highlighter-rouge">_config.yml</code>. A lot of things can be controlled from there.</p> <p>I am not sure if a <code class="language-plaintext highlighter-rouge">Gemfile</code> should be uploaded in your GitHub pages repo. Since Jekyll is a Ruby app, it might be needed, but I am definitely not sure about it. It might only be needed if you want to use plugins.</p> <h3 id="previewing-the-website-locally">Previewing the website locally</h3> <p>You can “build” (i.e. generate) your site locally following the instructions in the Jekyll <a href="https://jekyllrb.com/docs/">docs</a>.</p> <p>I use these command line options when writing posts and fiddling with the website (livereload is the good stuff).</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll serve <span class="nt">--drafts</span> <span class="nt">--incremental</span> <span class="nt">--livereload</span>
</code></pre></div></div> <h2 id="minimal-mistakes">Minimal-mistakes</h2> <p>To get the Minimal-mistakes theme running with your GitHub pages, just copy the <a href="https://github.com/mmistakes/minimal-mistakes/blob/master/_config.yml"><code class="language-plaintext highlighter-rouge">_config.yml</code></a> (link to <a href="https://raw.githubusercontent.com/mmistakes/minimal-mistakes/master/_config.yml">raw</a> file) from the Minimal-mistakes GitHub repo to your GitHub pages repo, and make sure you uncomment <code class="language-plaintext highlighter-rouge">remote_theme : "mmistakes/minimal-mistakes"</code>. This <code class="language-plaintext highlighter-rouge">_config.yml</code> file is in sync with the Minimal-mistakes <a href="https://mmistakes.github.io/minimal-mistakes/docs/configuration/">docs</a> and it is a good idea to go trough it quickly.</p> <p>Alternatively, you could fork the Minimal-mistakes <a href="https://github.com/mmistakes/minimal-mistakes">repo</a> and add your contents with <code class="language-plaintext highlighter-rouge">theme : "mmistakes/minimal-mistakes"</code> (instead of <code class="language-plaintext highlighter-rouge">remote_theme</code>) in <code class="language-plaintext highlighter-rouge">_config.yml</code>.</p> <h3 id="front-matter">Front matter</h3> <p>I somehow missed this and it caused a lot of problems: Front matter is a way to add metadata and/or commands to Jekyll how to render the page. Front matter looks like this:</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">How</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">set</span><span class="nv"> </span><span class="s">up</span><span class="nv"> </span><span class="s">a</span><span class="nv"> </span><span class="s">website</span><span class="nv"> </span><span class="s">like</span><span class="nv"> </span><span class="s">this"</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">tutorial</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="nn">---</span>
</code></pre></div></div> <p>It has to</p> <ul> <li>be at the beginning of the file;</li> <li>start with the line containing <code class="language-plaintext highlighter-rouge">---</code> and nothing else,</li> <li>which is followed by key value pairs (one per each line), separated by a colon <code class="language-plaintext highlighter-rouge">:</code>; and finally</li> <li>end with the line containing only <code class="language-plaintext highlighter-rouge">---</code>.</li> </ul> <p>Front matter applies to <code class="language-plaintext highlighter-rouge">.md</code> files (maybe to <code class="language-plaintext highlighter-rouge">.html</code> files as well - need to check).</p> <p>Some things I’ve already set up in this page but did not describe here are:</p> <ul> <li>MathJax</li> <li>Style sheets</li> <li>Categories (partially solved)</li> </ul>]]></content><author><name></name></author><category term="tutorial"/><summary type="html"><![CDATA[Old post about setting up Minimal Mistakes Jekyll theme (which I'm not using anymore)]]></summary></entry><entry><title type="html">My first post</title><link href="https://vatai.github.io/blog/2020/My-first-post/" rel="alternate" type="text/html" title="My first post"/><published>2020-12-05T23:04:00+00:00</published><updated>2020-12-05T23:04:00+00:00</updated><id>https://vatai.github.io/blog/2020/My-first-post</id><content type="html" xml:base="https://vatai.github.io/blog/2020/My-first-post/"><![CDATA[<h1 id="this-is-my-first-post">This is my first post</h1> <p>It is basically just a test</p> <h2 id="lets-test-some-math">Let’s test some math</h2> <p>With dollar signs for variable $a$. And then with backslash parenthesis for \(b\).</p> <p>\[\sum_{k=0}^\infty (-1)\frac{x^{2k+1}}{(2k+1)!}\]</p> <p>And with a formula above this.</p>]]></content><author><name></name></author><category term="Jekyll"/><category term="test"/><category term="Jekyll"/><summary type="html"><![CDATA[Short (test) post]]></summary></entry></feed>